
Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002a7e  00002b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  00002b1c  2**0
                  ALLOC
  3 .stab         000017e8  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000831  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000086c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__vector_1>
       8:	0c 94 67 06 	jmp	0xcce	; 0xcce <__vector_2>
       c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
ISR(TIMER1_COMPA_vect);
ISR(INT0_vect);
ISR(INT1_vect);
ISR(INT2_vect);

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	sei();  // Enable global interrupts
     b4e:	78 94       	sei
	Timer1_Init();  // Initialize Timer1
     b50:	0e 94 b9 05 	call	0xb72	; 0xb72 <Timer1_Init>
	INT0_Init(); // Initialize Interrupt 0 (Reset)
     b54:	0e 94 db 05 	call	0xbb6	; 0xbb6 <INT0_Init>
	INT1_Init(); // Initialize Interrupt 1 (Pause)
     b58:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <INT1_Init>
	INT2_Init(); // Initialize Interrupt 2 (Resume)
     b5c:	0e 94 05 06 	call	0xc0a	; 0xc0a <INT2_Init>
	PIN_DIRECTIONS(); // Configure I/O pins
     b60:	0e 94 2b 07 	call	0xe56	; 0xe56 <PIN_DIRECTIONS>

    while(1){
    	DISPLAY();
     b64:	0e 94 68 07 	call	0xed0	; 0xed0 <DISPLAY>
    	MODE();
     b68:	0e 94 32 0b 	call	0x1664	; 0x1664 <MODE>
    	ADJUST_TIME();
     b6c:	0e 94 48 0c 	call	0x1890	; 0x1890 <ADJUST_TIME>
     b70:	f9 cf       	rjmp	.-14     	; 0xb64 <main+0x1e>

00000b72 <Timer1_Init>:
    }
}

// Timer1 Initialization (CTC Mode, 1-second interval)
void Timer1_Init(void){
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1<<FOC1A);
     b7a:	af e4       	ldi	r26, 0x4F	; 79
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ef e4       	ldi	r30, 0x4F	; 79
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	88 60       	ori	r24, 0x08	; 8
     b86:	8c 93       	st	X, r24
    TCCR1B |= (1 << WGM12) | (1 << CS12) | (1<<CS10);  // CTC Mode, Prescaler 1024
     b88:	ae e4       	ldi	r26, 0x4E	; 78
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ee e4       	ldi	r30, 0x4E	; 78
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8d 60       	ori	r24, 0x0D	; 13
     b94:	8c 93       	st	X, r24
    TIMSK |= (1 << OCIE1A); // Enable Compare Match Interrupt
     b96:	a9 e5       	ldi	r26, 0x59	; 89
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e9 e5       	ldi	r30, 0x59	; 89
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	8c 93       	st	X, r24
    OCR1A =  15624; // 1-second interval
     ba4:	ea e4       	ldi	r30, 0x4A	; 74
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	88 e0       	ldi	r24, 0x08	; 8
     baa:	9d e3       	ldi	r25, 0x3D	; 61
     bac:	91 83       	std	Z+1, r25	; 0x01
     bae:	80 83       	st	Z, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <INT0_Init>:

// External Interrupt 0 (Reset Timer to 00:00:00)
void INT0_Init(void){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<ISC01); // Falling Edge Trigger
     bbe:	a5 e5       	ldi	r26, 0x55	; 85
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e5       	ldi	r30, 0x55	; 85
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	8c 93       	st	X, r24
	GICR |= (1<<INT0); // Enable External Interrupt 0
     bcc:	ab e5       	ldi	r26, 0x5B	; 91
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	eb e5       	ldi	r30, 0x5B	; 91
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 64       	ori	r24, 0x40	; 64
     bd8:	8c 93       	st	X, r24
}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <INT1_Init>:

// External Interrupt 1 (Pause Timer)
void INT1_Init(void){
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= (1<<ISC10) | (1<<ISC11); // Rising Edge Trigger
     be8:	a5 e5       	ldi	r26, 0x55	; 85
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e5 e5       	ldi	r30, 0x55	; 85
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8c 60       	ori	r24, 0x0C	; 12
     bf4:	8c 93       	st	X, r24
	GICR |= (1<<INT1); // Enable External Interrupt 1
     bf6:	ab e5       	ldi	r26, 0x5B	; 91
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	eb e5       	ldi	r30, 0x5B	; 91
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24
}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <INT2_Init>:

// External Interrupt 2 (Resume Timer)
void INT2_Init(void){
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &= ~(1<<ISC2); // Falling Edge Trigger
     c12:	a4 e5       	ldi	r26, 0x54	; 84
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e4 e5       	ldi	r30, 0x54	; 84
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7b       	andi	r24, 0xBF	; 191
     c1e:	8c 93       	st	X, r24
	GICR |= (1<<INT2); // Enable External Interrupt 2
     c20:	ab e5       	ldi	r26, 0x5B	; 91
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	eb e5       	ldi	r30, 0x5B	; 91
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 62       	ori	r24, 0x20	; 32
     c2c:	8c 93       	st	X, r24
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <__vector_7>:

// ISR for Timer1 Compare Match
ISR(TIMER1_COMPA_vect){
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	2f 93       	push	r18
     c40:	3f 93       	push	r19
     c42:	4f 93       	push	r20
     c44:	5f 93       	push	r21
     c46:	6f 93       	push	r22
     c48:	7f 93       	push	r23
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
	if(mode == 1){
     c5e:	80 91 68 00 	lds	r24, 0x0068
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	19 f4       	brne	.+6      	; 0xc6c <__vector_7+0x38>
		count_up();
     c66:	0e 94 b0 06 	call	0xd60	; 0xd60 <count_up>
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <__vector_7+0x3c>
	}
	else{
		count_down();
     c6c:	0e 94 df 06 	call	0xdbe	; 0xdbe <count_down>
	}
}
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	bf 91       	pop	r27
     c7a:	af 91       	pop	r26
     c7c:	9f 91       	pop	r25
     c7e:	8f 91       	pop	r24
     c80:	7f 91       	pop	r23
     c82:	6f 91       	pop	r22
     c84:	5f 91       	pop	r21
     c86:	4f 91       	pop	r20
     c88:	3f 91       	pop	r19
     c8a:	2f 91       	pop	r18
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <__vector_1>:

// ISR for Reset Button (INT0)
ISR(INT0_vect){
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8f 93       	push	r24
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	s=m=h=0;
     caa:	10 92 6c 00 	sts	0x006C, r1
     cae:	80 91 6c 00 	lds	r24, 0x006C
     cb2:	80 93 6b 00 	sts	0x006B, r24
     cb6:	80 91 6b 00 	lds	r24, 0x006B
     cba:	80 93 6a 00 	sts	0x006A, r24
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	8f 91       	pop	r24
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <__vector_2>:

// ISR for Pause Button (INT1)
ISR(INT1_vect){
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	8f 93       	push	r24
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~(1<<PD0); // Deactivate buzzer
     cea:	a2 e3       	ldi	r26, 0x32	; 50
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e2 e3       	ldi	r30, 0x32	; 50
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	8c 93       	st	X, r24
	TCCR1B &= ~(1 << CS12) & ~(1 << CS10); // Disable Timer
     cf8:	ae e4       	ldi	r26, 0x4E	; 78
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ee e4       	ldi	r30, 0x4E	; 78
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8a 7f       	andi	r24, 0xFA	; 250
     d04:	8c 93       	st	X, r24
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	8f 91       	pop	r24
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_3>:

// ISR for Resume Button (INT2)
ISR(INT2_vect){
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	8f 93       	push	r24
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS12) | (1 << CS10); // Enable Timer
     d3a:	ae e4       	ldi	r26, 0x4E	; 78
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	ee e4       	ldi	r30, 0x4E	; 78
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	85 60       	ori	r24, 0x05	; 5
     d46:	8c 93       	st	X, r24
}
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	8f 91       	pop	r24
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0
     d5c:	1f 90       	pop	r1
     d5e:	18 95       	reti

00000d60 <count_up>:

// Function to increment time (Count Up Mode)
void count_up(void){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	 PORTD &= ~(1<<PD0); // Deactivate buzzer
     d68:	a2 e3       	ldi	r26, 0x32	; 50
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e2 e3       	ldi	r30, 0x32	; 50
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8e 7f       	andi	r24, 0xFE	; 254
     d74:	8c 93       	st	X, r24
	 s++;
     d76:	80 91 6a 00 	lds	r24, 0x006A
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 93 6a 00 	sts	0x006A, r24
	 if (s >= 60){
     d80:	80 91 6a 00 	lds	r24, 0x006A
     d84:	8c 33       	cpi	r24, 0x3C	; 60
     d86:	38 f0       	brcs	.+14     	; 0xd96 <count_up+0x36>
		 s = 0; m++;
     d88:	10 92 6a 00 	sts	0x006A, r1
     d8c:	80 91 6b 00 	lds	r24, 0x006B
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	80 93 6b 00 	sts	0x006B, r24
	 }
	 if (m >= 60){
     d96:	80 91 6b 00 	lds	r24, 0x006B
     d9a:	8c 33       	cpi	r24, 0x3C	; 60
     d9c:	38 f0       	brcs	.+14     	; 0xdac <count_up+0x4c>
		 m = 0; h++;
     d9e:	10 92 6b 00 	sts	0x006B, r1
     da2:	80 91 6c 00 	lds	r24, 0x006C
     da6:	8f 5f       	subi	r24, 0xFF	; 255
     da8:	80 93 6c 00 	sts	0x006C, r24
	 }
	 if (h >= 24){
     dac:	80 91 6c 00 	lds	r24, 0x006C
     db0:	88 31       	cpi	r24, 0x18	; 24
     db2:	10 f0       	brcs	.+4      	; 0xdb8 <count_up+0x58>
		 h = 0; // Reset after 24 hours
     db4:	10 92 6c 00 	sts	0x006C, r1
	 }
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <count_down>:

// Function to decrement time (Count Down Mode)
void count_down(void){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	if (s == 0 && m == 0 && h == 0) {
     dc6:	80 91 6a 00 	lds	r24, 0x006A
     dca:	88 23       	and	r24, r24
     dcc:	b9 f4       	brne	.+46     	; 0xdfc <count_down+0x3e>
     dce:	80 91 6b 00 	lds	r24, 0x006B
     dd2:	88 23       	and	r24, r24
     dd4:	99 f4       	brne	.+38     	; 0xdfc <count_down+0x3e>
     dd6:	80 91 6c 00 	lds	r24, 0x006C
     dda:	88 23       	and	r24, r24
     ddc:	79 f4       	brne	.+30     	; 0xdfc <count_down+0x3e>
	    TCCR1B &= ~((1 << CS12) | (1 << CS10)); // Stop timer
     dde:	ae e4       	ldi	r26, 0x4E	; 78
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ee e4       	ldi	r30, 0x4E	; 78
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8a 7f       	andi	r24, 0xFA	; 250
     dea:	8c 93       	st	X, r24
	    PORTD |= (1<<PD0); // Activate buzzer
     dec:	a2 e3       	ldi	r26, 0x32	; 50
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e2 e3       	ldi	r30, 0x32	; 50
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	8c 93       	st	X, r24
     dfa:	2a c0       	rjmp	.+84     	; 0xe50 <count_down+0x92>
	}
	else{
		PORTD &= ~(1<<PD0); // Deactivate buzzer
     dfc:	a2 e3       	ldi	r26, 0x32	; 50
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e2 e3       	ldi	r30, 0x32	; 50
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8e 7f       	andi	r24, 0xFE	; 254
     e08:	8c 93       	st	X, r24
		if(s == 0){
     e0a:	80 91 6a 00 	lds	r24, 0x006A
     e0e:	88 23       	and	r24, r24
     e10:	d1 f4       	brne	.+52     	; 0xe46 <count_down+0x88>
			s = 59;
     e12:	8b e3       	ldi	r24, 0x3B	; 59
     e14:	80 93 6a 00 	sts	0x006A, r24
			if(m == 0){
     e18:	80 91 6b 00 	lds	r24, 0x006B
     e1c:	88 23       	and	r24, r24
     e1e:	69 f4       	brne	.+26     	; 0xe3a <count_down+0x7c>
				m = 59;
     e20:	8b e3       	ldi	r24, 0x3B	; 59
     e22:	80 93 6b 00 	sts	0x006B, r24
				if(h > 0) h--;
     e26:	80 91 6c 00 	lds	r24, 0x006C
     e2a:	88 23       	and	r24, r24
     e2c:	89 f0       	breq	.+34     	; 0xe50 <count_down+0x92>
     e2e:	80 91 6c 00 	lds	r24, 0x006C
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	80 93 6c 00 	sts	0x006C, r24
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <count_down+0x92>
			}
			else{
				m--;
     e3a:	80 91 6b 00 	lds	r24, 0x006B
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	80 93 6b 00 	sts	0x006B, r24
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <count_down+0x92>
			}
		}
		else{
			s--;
     e46:	80 91 6a 00 	lds	r24, 0x006A
     e4a:	81 50       	subi	r24, 0x01	; 1
     e4c:	80 93 6a 00 	sts	0x006A, r24
		}
	}
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <PIN_DIRECTIONS>:

// Configure I/O pins
void PIN_DIRECTIONS(void){
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x3F;  // First 6 PINs as output for 7-segment selection
     e5e:	aa e3       	ldi	r26, 0x3A	; 58
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e3       	ldi	r30, 0x3A	; 58
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 63       	ori	r24, 0x3F	; 63
     e6a:	8c 93       	st	X, r24
	PORTA &= ~0x3F;
     e6c:	ab e3       	ldi	r26, 0x3B	; 59
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	eb e3       	ldi	r30, 0x3B	; 59
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 7c       	andi	r24, 0xC0	; 192
     e78:	8c 93       	st	X, r24

	DDRB = 0; // All Input
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	10 82       	st	Z, r1
	PORTB = 0xFF; // Internal Pull-Up
     e80:	e8 e3       	ldi	r30, 0x38	; 56
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	80 83       	st	Z, r24

	DDRC = 0x0F;  // First 4 PINs as output for decoder
     e88:	e4 e3       	ldi	r30, 0x34	; 52
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8f e0       	ldi	r24, 0x0F	; 15
     e8e:	80 83       	st	Z, r24
	PORTC &= 0xF0;
     e90:	a5 e3       	ldi	r26, 0x35	; 53
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e3       	ldi	r30, 0x35	; 53
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 7f       	andi	r24, 0xF0	; 240
     e9c:	8c 93       	st	X, r24

	DDRD = (DDRD & ~0x3C) | 0x31;   // Configure PD2, PD3, PD4, PD5
     e9e:	a1 e3       	ldi	r26, 0x31	; 49
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e1 e3       	ldi	r30, 0x31	; 49
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	82 7c       	andi	r24, 0xC2	; 194
     eaa:	81 63       	ori	r24, 0x31	; 49
     eac:	8c 93       	st	X, r24
	PORTD |= (1<<PD2) | (1<<PD4);
     eae:	a2 e3       	ldi	r26, 0x32	; 50
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e2 e3       	ldi	r30, 0x32	; 50
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	84 61       	ori	r24, 0x14	; 20
     eba:	8c 93       	st	X, r24
	PORTD &= ~(1<<PD5);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7d       	andi	r24, 0xDF	; 223
     ec8:	8c 93       	st	X, r24
}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <DISPLAY>:

// Display time on 7-segment display
void DISPLAY(void){
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	c4 55       	subi	r28, 0x54	; 84
     ede:	d0 40       	sbci	r29, 0x00	; 0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
	PORTC = (PORTC & 0xF0) | (s % 10);
     eea:	a5 e3       	ldi	r26, 0x35	; 53
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e3       	ldi	r30, 0x35	; 53
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	28 2f       	mov	r18, r24
     ef6:	20 7f       	andi	r18, 0xF0	; 240
     ef8:	80 91 6a 00 	lds	r24, 0x006A
     efc:	9a e0       	ldi	r25, 0x0A	; 10
     efe:	69 2f       	mov	r22, r25
     f00:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
     f04:	89 2f       	mov	r24, r25
     f06:	82 2b       	or	r24, r18
     f08:	8c 93       	st	X, r24
	PORTA |= 0x20; _delay_ms(5); PORTA &= ~0x20;
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 62       	ori	r24, 0x20	; 32
     f16:	8c 93       	st	X, r24
     f18:	fe 01       	movw	r30, r28
     f1a:	ef 5a       	subi	r30, 0xAF	; 175
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a0 ea       	ldi	r26, 0xA0	; 160
     f24:	b0 e4       	ldi	r27, 0x40	; 64
     f26:	80 83       	st	Z, r24
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	a2 83       	std	Z+2, r26	; 0x02
     f2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2e:	8e 01       	movw	r16, r28
     f30:	03 5b       	subi	r16, 0xB3	; 179
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	fe 01       	movw	r30, r28
     f36:	ef 5a       	subi	r30, 0xAF	; 175
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4a e7       	ldi	r20, 0x7A	; 122
     f48:	55 e4       	ldi	r21, 0x45	; 69
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	f8 01       	movw	r30, r16
     f54:	80 83       	st	Z, r24
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	a2 83       	std	Z+2, r26	; 0x02
     f5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f5c:	fe 01       	movw	r30, r28
     f5e:	e3 5b       	subi	r30, 0xB3	; 179
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e8       	ldi	r20, 0x80	; 128
     f70:	5f e3       	ldi	r21, 0x3F	; 63
     f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f76:	88 23       	and	r24, r24
     f78:	44 f4       	brge	.+16     	; 0xf8a <DISPLAY+0xba>
		__ticks = 1;
     f7a:	fe 01       	movw	r30, r28
     f7c:	e5 5b       	subi	r30, 0xB5	; 181
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
     f88:	64 c0       	rjmp	.+200    	; 0x1052 <DISPLAY+0x182>
	else if (__tmp > 65535)
     f8a:	fe 01       	movw	r30, r28
     f8c:	e3 5b       	subi	r30, 0xB3	; 179
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <DISPLAY+0xda>
     fa8:	43 c0       	rjmp	.+134    	; 0x1030 <DISPLAY+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	fe 01       	movw	r30, r28
     fac:	ef 5a       	subi	r30, 0xAF	; 175
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	8e 01       	movw	r16, r28
     fca:	05 5b       	subi	r16, 0xB5	; 181
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	f8 01       	movw	r30, r16
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
     fe0:	1f c0       	rjmp	.+62     	; 0x1020 <DISPLAY+0x150>
     fe2:	fe 01       	movw	r30, r28
     fe4:	e7 5b       	subi	r30, 0xB7	; 183
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	80 e9       	ldi	r24, 0x90	; 144
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ff0:	fe 01       	movw	r30, r28
     ff2:	e7 5b       	subi	r30, 0xB7	; 183
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <DISPLAY+0x12a>
     ffe:	fe 01       	movw	r30, r28
    1000:	e7 5b       	subi	r30, 0xB7	; 183
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	de 01       	movw	r26, r28
    100a:	a5 5b       	subi	r26, 0xB5	; 181
    100c:	bf 4f       	sbci	r27, 0xFF	; 255
    100e:	fe 01       	movw	r30, r28
    1010:	e5 5b       	subi	r30, 0xB5	; 181
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	11 96       	adiw	r26, 0x01	; 1
    101c:	9c 93       	st	X, r25
    101e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	fe 01       	movw	r30, r28
    1022:	e5 5b       	subi	r30, 0xB5	; 181
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	d1 f6       	brne	.-76     	; 0xfe2 <DISPLAY+0x112>
    102e:	27 c0       	rjmp	.+78     	; 0x107e <DISPLAY+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1030:	8e 01       	movw	r16, r28
    1032:	05 5b       	subi	r16, 0xB5	; 181
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	fe 01       	movw	r30, r28
    1038:	e3 5b       	subi	r30, 0xB3	; 179
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	60 81       	ld	r22, Z
    103e:	71 81       	ldd	r23, Z+1	; 0x01
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	f8 01       	movw	r30, r16
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
    1052:	de 01       	movw	r26, r28
    1054:	a9 5b       	subi	r26, 0xB9	; 185
    1056:	bf 4f       	sbci	r27, 0xFF	; 255
    1058:	fe 01       	movw	r30, r28
    105a:	e5 5b       	subi	r30, 0xB5	; 181
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	8d 93       	st	X+, r24
    1064:	9c 93       	st	X, r25
    1066:	fe 01       	movw	r30, r28
    1068:	e9 5b       	subi	r30, 0xB9	; 185
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <DISPLAY+0x1a0>
    1074:	fe 01       	movw	r30, r28
    1076:	e9 5b       	subi	r30, 0xB9	; 185
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
    107e:	ab e3       	ldi	r26, 0x3B	; 59
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	eb e3       	ldi	r30, 0x3B	; 59
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8f 7d       	andi	r24, 0xDF	; 223
    108a:	8c 93       	st	X, r24

	PORTC = (PORTC & 0xF0) | (s / 10);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	28 2f       	mov	r18, r24
    1098:	20 7f       	andi	r18, 0xF0	; 240
    109a:	80 91 6a 00 	lds	r24, 0x006A
    109e:	9a e0       	ldi	r25, 0x0A	; 10
    10a0:	69 2f       	mov	r22, r25
    10a2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    10a6:	82 2b       	or	r24, r18
    10a8:	8c 93       	st	X, r24
	PORTA |= 0x10; _delay_ms(5); PORTA &= ~0x10;
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 61       	ori	r24, 0x10	; 16
    10b6:	8c 93       	st	X, r24
    10b8:	fe 01       	movw	r30, r28
    10ba:	ed 5b       	subi	r30, 0xBD	; 189
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 ea       	ldi	r26, 0xA0	; 160
    10c4:	b0 e4       	ldi	r27, 0x40	; 64
    10c6:	80 83       	st	Z, r24
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	a2 83       	std	Z+2, r26	; 0x02
    10cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ce:	8e 01       	movw	r16, r28
    10d0:	01 5c       	subi	r16, 0xC1	; 193
    10d2:	1f 4f       	sbci	r17, 0xFF	; 255
    10d4:	fe 01       	movw	r30, r28
    10d6:	ed 5b       	subi	r30, 0xBD	; 189
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	4a e7       	ldi	r20, 0x7A	; 122
    10e8:	55 e4       	ldi	r21, 0x45	; 69
    10ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	f8 01       	movw	r30, r16
    10f4:	80 83       	st	Z, r24
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	a2 83       	std	Z+2, r26	; 0x02
    10fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10fc:	fe 01       	movw	r30, r28
    10fe:	ff 96       	adiw	r30, 0x3f	; 63
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	5f e3       	ldi	r21, 0x3F	; 63
    1110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1114:	88 23       	and	r24, r24
    1116:	2c f4       	brge	.+10     	; 0x1122 <DISPLAY+0x252>
		__ticks = 1;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9e af       	std	Y+62, r25	; 0x3e
    111e:	8d af       	std	Y+61, r24	; 0x3d
    1120:	46 c0       	rjmp	.+140    	; 0x11ae <DISPLAY+0x2de>
	else if (__tmp > 65535)
    1122:	fe 01       	movw	r30, r28
    1124:	ff 96       	adiw	r30, 0x3f	; 63
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113a:	18 16       	cp	r1, r24
    113c:	64 f5       	brge	.+88     	; 0x1196 <DISPLAY+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	fe 01       	movw	r30, r28
    1140:	ed 5b       	subi	r30, 0xBD	; 189
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9e af       	std	Y+62, r25	; 0x3e
    116a:	8d af       	std	Y+61, r24	; 0x3d
    116c:	0f c0       	rjmp	.+30     	; 0x118c <DISPLAY+0x2bc>
    116e:	80 e9       	ldi	r24, 0x90	; 144
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	9c af       	std	Y+60, r25	; 0x3c
    1174:	8b af       	std	Y+59, r24	; 0x3b
    1176:	8b ad       	ldd	r24, Y+59	; 0x3b
    1178:	9c ad       	ldd	r25, Y+60	; 0x3c
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <DISPLAY+0x2aa>
    117e:	9c af       	std	Y+60, r25	; 0x3c
    1180:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	8d ad       	ldd	r24, Y+61	; 0x3d
    1184:	9e ad       	ldd	r25, Y+62	; 0x3e
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9e af       	std	Y+62, r25	; 0x3e
    118a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	8d ad       	ldd	r24, Y+61	; 0x3d
    118e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <DISPLAY+0x29e>
    1194:	16 c0       	rjmp	.+44     	; 0x11c2 <DISPLAY+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	fe 01       	movw	r30, r28
    1198:	ff 96       	adiw	r30, 0x3f	; 63
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e af       	std	Y+62, r25	; 0x3e
    11ac:	8d af       	std	Y+61, r24	; 0x3d
    11ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b2:	9a af       	std	Y+58, r25	; 0x3a
    11b4:	89 af       	std	Y+57, r24	; 0x39
    11b6:	89 ad       	ldd	r24, Y+57	; 0x39
    11b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <DISPLAY+0x2ea>
    11be:	9a af       	std	Y+58, r25	; 0x3a
    11c0:	89 af       	std	Y+57, r24	; 0x39
    11c2:	ab e3       	ldi	r26, 0x3B	; 59
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e3       	ldi	r30, 0x3B	; 59
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7e       	andi	r24, 0xEF	; 239
    11ce:	8c 93       	st	X, r24

	PORTC = (PORTC & 0xF0) | (m % 10);
    11d0:	a5 e3       	ldi	r26, 0x35	; 53
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e3       	ldi	r30, 0x35	; 53
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	20 7f       	andi	r18, 0xF0	; 240
    11de:	80 91 6b 00 	lds	r24, 0x006B
    11e2:	9a e0       	ldi	r25, 0x0A	; 10
    11e4:	69 2f       	mov	r22, r25
    11e6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    11ea:	89 2f       	mov	r24, r25
    11ec:	82 2b       	or	r24, r18
    11ee:	8c 93       	st	X, r24
	PORTA |= 0x08; _delay_ms(5); PORTA &= ~0x08;
    11f0:	ab e3       	ldi	r26, 0x3B	; 59
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 60       	ori	r24, 0x08	; 8
    11fc:	8c 93       	st	X, r24
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 ea       	ldi	r26, 0xA0	; 160
    1204:	b0 e4       	ldi	r27, 0x40	; 64
    1206:	8d ab       	std	Y+53, r24	; 0x35
    1208:	9e ab       	std	Y+54, r25	; 0x36
    120a:	af ab       	std	Y+55, r26	; 0x37
    120c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120e:	6d a9       	ldd	r22, Y+53	; 0x35
    1210:	7e a9       	ldd	r23, Y+54	; 0x36
    1212:	8f a9       	ldd	r24, Y+55	; 0x37
    1214:	98 ad       	ldd	r25, Y+56	; 0x38
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a e7       	ldi	r20, 0x7A	; 122
    121c:	55 e4       	ldi	r21, 0x45	; 69
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	89 ab       	std	Y+49, r24	; 0x31
    1228:	9a ab       	std	Y+50, r25	; 0x32
    122a:	ab ab       	std	Y+51, r26	; 0x33
    122c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    122e:	69 a9       	ldd	r22, Y+49	; 0x31
    1230:	7a a9       	ldd	r23, Y+50	; 0x32
    1232:	8b a9       	ldd	r24, Y+51	; 0x33
    1234:	9c a9       	ldd	r25, Y+52	; 0x34
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1242:	88 23       	and	r24, r24
    1244:	2c f4       	brge	.+10     	; 0x1250 <DISPLAY+0x380>
		__ticks = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	98 ab       	std	Y+48, r25	; 0x30
    124c:	8f a7       	std	Y+47, r24	; 0x2f
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <DISPLAY+0x3fe>
	else if (__tmp > 65535)
    1250:	69 a9       	ldd	r22, Y+49	; 0x31
    1252:	7a a9       	ldd	r23, Y+50	; 0x32
    1254:	8b a9       	ldd	r24, Y+51	; 0x33
    1256:	9c a9       	ldd	r25, Y+52	; 0x34
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	57 e4       	ldi	r21, 0x47	; 71
    1260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	4c f5       	brge	.+82     	; 0x12ba <DISPLAY+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	6d a9       	ldd	r22, Y+53	; 0x35
    126a:	7e a9       	ldd	r23, Y+54	; 0x36
    126c:	8f a9       	ldd	r24, Y+55	; 0x37
    126e:	98 ad       	ldd	r25, Y+56	; 0x38
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	98 ab       	std	Y+48, r25	; 0x30
    128e:	8f a7       	std	Y+47, r24	; 0x2f
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <DISPLAY+0x3e0>
    1292:	80 e9       	ldi	r24, 0x90	; 144
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	9e a7       	std	Y+46, r25	; 0x2e
    1298:	8d a7       	std	Y+45, r24	; 0x2d
    129a:	8d a5       	ldd	r24, Y+45	; 0x2d
    129c:	9e a5       	ldd	r25, Y+46	; 0x2e
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <DISPLAY+0x3ce>
    12a2:	9e a7       	std	Y+46, r25	; 0x2e
    12a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a8:	98 a9       	ldd	r25, Y+48	; 0x30
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	98 ab       	std	Y+48, r25	; 0x30
    12ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b2:	98 a9       	ldd	r25, Y+48	; 0x30
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f7       	brne	.-38     	; 0x1292 <DISPLAY+0x3c2>
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <DISPLAY+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	69 a9       	ldd	r22, Y+49	; 0x31
    12bc:	7a a9       	ldd	r23, Y+50	; 0x32
    12be:	8b a9       	ldd	r24, Y+51	; 0x33
    12c0:	9c a9       	ldd	r25, Y+52	; 0x34
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	98 ab       	std	Y+48, r25	; 0x30
    12cc:	8f a7       	std	Y+47, r24	; 0x2f
    12ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    12d0:	98 a9       	ldd	r25, Y+48	; 0x30
    12d2:	9c a7       	std	Y+44, r25	; 0x2c
    12d4:	8b a7       	std	Y+43, r24	; 0x2b
    12d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <DISPLAY+0x40a>
    12de:	9c a7       	std	Y+44, r25	; 0x2c
    12e0:	8b a7       	std	Y+43, r24	; 0x2b
    12e2:	ab e3       	ldi	r26, 0x3B	; 59
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	87 7f       	andi	r24, 0xF7	; 247
    12ee:	8c 93       	st	X, r24

	PORTC = (PORTC & 0xF0) | (m / 10);
    12f0:	a5 e3       	ldi	r26, 0x35	; 53
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e3       	ldi	r30, 0x35	; 53
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	28 2f       	mov	r18, r24
    12fc:	20 7f       	andi	r18, 0xF0	; 240
    12fe:	80 91 6b 00 	lds	r24, 0x006B
    1302:	9a e0       	ldi	r25, 0x0A	; 10
    1304:	69 2f       	mov	r22, r25
    1306:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    130a:	82 2b       	or	r24, r18
    130c:	8c 93       	st	X, r24
	PORTA |= 0x04; _delay_ms(5); PORTA &= ~0x04;
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	84 60       	ori	r24, 0x04	; 4
    131a:	8c 93       	st	X, r24
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a0 ea       	ldi	r26, 0xA0	; 160
    1322:	b0 e4       	ldi	r27, 0x40	; 64
    1324:	8f a3       	std	Y+39, r24	; 0x27
    1326:	98 a7       	std	Y+40, r25	; 0x28
    1328:	a9 a7       	std	Y+41, r26	; 0x29
    132a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132c:	6f a1       	ldd	r22, Y+39	; 0x27
    132e:	78 a5       	ldd	r23, Y+40	; 0x28
    1330:	89 a5       	ldd	r24, Y+41	; 0x29
    1332:	9a a5       	ldd	r25, Y+42	; 0x2a
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a e7       	ldi	r20, 0x7A	; 122
    133a:	55 e4       	ldi	r21, 0x45	; 69
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	8b a3       	std	Y+35, r24	; 0x23
    1346:	9c a3       	std	Y+36, r25	; 0x24
    1348:	ad a3       	std	Y+37, r26	; 0x25
    134a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    134c:	6b a1       	ldd	r22, Y+35	; 0x23
    134e:	7c a1       	ldd	r23, Y+36	; 0x24
    1350:	8d a1       	ldd	r24, Y+37	; 0x25
    1352:	9e a1       	ldd	r25, Y+38	; 0x26
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	2c f4       	brge	.+10     	; 0x136e <DISPLAY+0x49e>
		__ticks = 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9a a3       	std	Y+34, r25	; 0x22
    136a:	89 a3       	std	Y+33, r24	; 0x21
    136c:	3f c0       	rjmp	.+126    	; 0x13ec <DISPLAY+0x51c>
	else if (__tmp > 65535)
    136e:	6b a1       	ldd	r22, Y+35	; 0x23
    1370:	7c a1       	ldd	r23, Y+36	; 0x24
    1372:	8d a1       	ldd	r24, Y+37	; 0x25
    1374:	9e a1       	ldd	r25, Y+38	; 0x26
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	4f e7       	ldi	r20, 0x7F	; 127
    137c:	57 e4       	ldi	r21, 0x47	; 71
    137e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1382:	18 16       	cp	r1, r24
    1384:	4c f5       	brge	.+82     	; 0x13d8 <DISPLAY+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1386:	6f a1       	ldd	r22, Y+39	; 0x27
    1388:	78 a5       	ldd	r23, Y+40	; 0x28
    138a:	89 a5       	ldd	r24, Y+41	; 0x29
    138c:	9a a5       	ldd	r25, Y+42	; 0x2a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e2       	ldi	r20, 0x20	; 32
    1394:	51 e4       	ldi	r21, 0x41	; 65
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9a a3       	std	Y+34, r25	; 0x22
    13ac:	89 a3       	std	Y+33, r24	; 0x21
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <DISPLAY+0x4fe>
    13b0:	80 e9       	ldi	r24, 0x90	; 144
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	98 a3       	std	Y+32, r25	; 0x20
    13b6:	8f 8f       	std	Y+31, r24	; 0x1f
    13b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ba:	98 a1       	ldd	r25, Y+32	; 0x20
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <DISPLAY+0x4ec>
    13c0:	98 a3       	std	Y+32, r25	; 0x20
    13c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c4:	89 a1       	ldd	r24, Y+33	; 0x21
    13c6:	9a a1       	ldd	r25, Y+34	; 0x22
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	9a a3       	std	Y+34, r25	; 0x22
    13cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ce:	89 a1       	ldd	r24, Y+33	; 0x21
    13d0:	9a a1       	ldd	r25, Y+34	; 0x22
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	69 f7       	brne	.-38     	; 0x13b0 <DISPLAY+0x4e0>
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <DISPLAY+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d8:	6b a1       	ldd	r22, Y+35	; 0x23
    13da:	7c a1       	ldd	r23, Y+36	; 0x24
    13dc:	8d a1       	ldd	r24, Y+37	; 0x25
    13de:	9e a1       	ldd	r25, Y+38	; 0x26
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9a a3       	std	Y+34, r25	; 0x22
    13ea:	89 a3       	std	Y+33, r24	; 0x21
    13ec:	89 a1       	ldd	r24, Y+33	; 0x21
    13ee:	9a a1       	ldd	r25, Y+34	; 0x22
    13f0:	9e 8f       	std	Y+30, r25	; 0x1e
    13f2:	8d 8f       	std	Y+29, r24	; 0x1d
    13f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <DISPLAY+0x528>
    13fc:	9e 8f       	std	Y+30, r25	; 0x1e
    13fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1400:	ab e3       	ldi	r26, 0x3B	; 59
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e3       	ldi	r30, 0x3B	; 59
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8b 7f       	andi	r24, 0xFB	; 251
    140c:	8c 93       	st	X, r24

	PORTC = (PORTC & 0xF0) | (h % 10);
    140e:	a5 e3       	ldi	r26, 0x35	; 53
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	20 7f       	andi	r18, 0xF0	; 240
    141c:	80 91 6c 00 	lds	r24, 0x006C
    1420:	9a e0       	ldi	r25, 0x0A	; 10
    1422:	69 2f       	mov	r22, r25
    1424:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    1428:	89 2f       	mov	r24, r25
    142a:	82 2b       	or	r24, r18
    142c:	8c 93       	st	X, r24
	PORTA |= 0x02; _delay_ms(5); PORTA &= ~0x02;
    142e:	ab e3       	ldi	r26, 0x3B	; 59
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e3       	ldi	r30, 0x3B	; 59
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	82 60       	ori	r24, 0x02	; 2
    143a:	8c 93       	st	X, r24
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a0 ea       	ldi	r26, 0xA0	; 160
    1442:	b0 e4       	ldi	r27, 0x40	; 64
    1444:	89 8f       	std	Y+25, r24	; 0x19
    1446:	9a 8f       	std	Y+26, r25	; 0x1a
    1448:	ab 8f       	std	Y+27, r26	; 0x1b
    144a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	69 8d       	ldd	r22, Y+25	; 0x19
    144e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a e7       	ldi	r20, 0x7A	; 122
    145a:	55 e4       	ldi	r21, 0x45	; 69
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8d 8b       	std	Y+21, r24	; 0x15
    1466:	9e 8b       	std	Y+22, r25	; 0x16
    1468:	af 8b       	std	Y+23, r26	; 0x17
    146a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    146c:	6d 89       	ldd	r22, Y+21	; 0x15
    146e:	7e 89       	ldd	r23, Y+22	; 0x16
    1470:	8f 89       	ldd	r24, Y+23	; 0x17
    1472:	98 8d       	ldd	r25, Y+24	; 0x18
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e8       	ldi	r20, 0x80	; 128
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <DISPLAY+0x5be>
		__ticks = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9c 8b       	std	Y+20, r25	; 0x14
    148a:	8b 8b       	std	Y+19, r24	; 0x13
    148c:	3f c0       	rjmp	.+126    	; 0x150c <DISPLAY+0x63c>
	else if (__tmp > 65535)
    148e:	6d 89       	ldd	r22, Y+21	; 0x15
    1490:	7e 89       	ldd	r23, Y+22	; 0x16
    1492:	8f 89       	ldd	r24, Y+23	; 0x17
    1494:	98 8d       	ldd	r25, Y+24	; 0x18
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f5       	brge	.+82     	; 0x14f8 <DISPLAY+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	69 8d       	ldd	r22, Y+25	; 0x19
    14a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9c 8b       	std	Y+20, r25	; 0x14
    14cc:	8b 8b       	std	Y+19, r24	; 0x13
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <DISPLAY+0x61e>
    14d0:	80 e9       	ldi	r24, 0x90	; 144
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	9a 8b       	std	Y+18, r25	; 0x12
    14d6:	89 8b       	std	Y+17, r24	; 0x11
    14d8:	89 89       	ldd	r24, Y+17	; 0x11
    14da:	9a 89       	ldd	r25, Y+18	; 0x12
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <DISPLAY+0x60c>
    14e0:	9a 8b       	std	Y+18, r25	; 0x12
    14e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	8b 89       	ldd	r24, Y+19	; 0x13
    14e6:	9c 89       	ldd	r25, Y+20	; 0x14
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9c 8b       	std	Y+20, r25	; 0x14
    14ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	8b 89       	ldd	r24, Y+19	; 0x13
    14f0:	9c 89       	ldd	r25, Y+20	; 0x14
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <DISPLAY+0x600>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <DISPLAY+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	6d 89       	ldd	r22, Y+21	; 0x15
    14fa:	7e 89       	ldd	r23, Y+22	; 0x16
    14fc:	8f 89       	ldd	r24, Y+23	; 0x17
    14fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9c 8b       	std	Y+20, r25	; 0x14
    150a:	8b 8b       	std	Y+19, r24	; 0x13
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	98 8b       	std	Y+16, r25	; 0x10
    1512:	8f 87       	std	Y+15, r24	; 0x0f
    1514:	8f 85       	ldd	r24, Y+15	; 0x0f
    1516:	98 89       	ldd	r25, Y+16	; 0x10
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <DISPLAY+0x648>
    151c:	98 8b       	std	Y+16, r25	; 0x10
    151e:	8f 87       	std	Y+15, r24	; 0x0f
    1520:	ab e3       	ldi	r26, 0x3B	; 59
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	eb e3       	ldi	r30, 0x3B	; 59
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8d 7f       	andi	r24, 0xFD	; 253
    152c:	8c 93       	st	X, r24

	PORTC = (PORTC & 0xF0) | (h / 10);
    152e:	a5 e3       	ldi	r26, 0x35	; 53
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e5 e3       	ldi	r30, 0x35	; 53
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	20 7f       	andi	r18, 0xF0	; 240
    153c:	80 91 6c 00 	lds	r24, 0x006C
    1540:	9a e0       	ldi	r25, 0x0A	; 10
    1542:	69 2f       	mov	r22, r25
    1544:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    1548:	82 2b       	or	r24, r18
    154a:	8c 93       	st	X, r24
	PORTA |= 0x01; _delay_ms(5);  PORTA &= ~0x01;
    154c:	ab e3       	ldi	r26, 0x3B	; 59
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	eb e3       	ldi	r30, 0x3B	; 59
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	8c 93       	st	X, r24
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 ea       	ldi	r26, 0xA0	; 160
    1560:	b0 e4       	ldi	r27, 0x40	; 64
    1562:	8b 87       	std	Y+11, r24	; 0x0b
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	ad 87       	std	Y+13, r26	; 0x0d
    1568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a e7       	ldi	r20, 0x7A	; 122
    1578:	55 e4       	ldi	r21, 0x45	; 69
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	98 87       	std	Y+8, r25	; 0x08
    1586:	a9 87       	std	Y+9, r26	; 0x09
    1588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <DISPLAY+0x6dc>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <DISPLAY+0x75a>
	else if (__tmp > 65535)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <DISPLAY+0x746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <DISPLAY+0x73c>
    15ee:	80 e9       	ldi	r24, 0x90	; 144
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <DISPLAY+0x72a>
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <DISPLAY+0x71e>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <DISPLAY+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <DISPLAY+0x766>
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	ab e3       	ldi	r26, 0x3B	; 59
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	eb e3       	ldi	r30, 0x3B	; 59
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8e 7f       	andi	r24, 0xFE	; 254
    164a:	8c 93       	st	X, r24
}
    164c:	cc 5a       	subi	r28, 0xAC	; 172
    164e:	df 4f       	sbci	r29, 0xFF	; 255
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	08 95       	ret

00001664 <MODE>:

// Toggle mode between Count Up and Count Down
void MODE(void){
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	6c 97       	sbiw	r28, 0x1c	; 28
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1 << PB7))) { // Check if button is pressed (active low)
    1678:	e6 e3       	ldi	r30, 0x36	; 54
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	88 23       	and	r24, r24
    1680:	0c f4       	brge	.+2      	; 0x1684 <MODE+0x20>
    1682:	fd c0       	rjmp	.+506    	; 0x187e <MODE+0x21a>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e8       	ldi	r26, 0x80	; 128
    168a:	bf e3       	ldi	r27, 0x3F	; 63
    168c:	89 8f       	std	Y+25, r24	; 0x19
    168e:	9a 8f       	std	Y+26, r25	; 0x1a
    1690:	ab 8f       	std	Y+27, r26	; 0x1b
    1692:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	69 8d       	ldd	r22, Y+25	; 0x19
    1696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a e7       	ldi	r20, 0x7A	; 122
    16a2:	55 e4       	ldi	r21, 0x45	; 69
    16a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8d 8b       	std	Y+21, r24	; 0x15
    16ae:	9e 8b       	std	Y+22, r25	; 0x16
    16b0:	af 8b       	std	Y+23, r26	; 0x17
    16b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b4:	6d 89       	ldd	r22, Y+21	; 0x15
    16b6:	7e 89       	ldd	r23, Y+22	; 0x16
    16b8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ba:	98 8d       	ldd	r25, Y+24	; 0x18
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <MODE+0x72>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9c 8b       	std	Y+20, r25	; 0x14
    16d2:	8b 8b       	std	Y+19, r24	; 0x13
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <MODE+0xf0>
	else if (__tmp > 65535)
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	7e 89       	ldd	r23, Y+22	; 0x16
    16da:	8f 89       	ldd	r24, Y+23	; 0x17
    16dc:	98 8d       	ldd	r25, Y+24	; 0x18
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <MODE+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	69 8d       	ldd	r22, Y+25	; 0x19
    16f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9c 8b       	std	Y+20, r25	; 0x14
    1714:	8b 8b       	std	Y+19, r24	; 0x13
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <MODE+0xd2>
    1718:	80 e9       	ldi	r24, 0x90	; 144
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	9a 8b       	std	Y+18, r25	; 0x12
    171e:	89 8b       	std	Y+17, r24	; 0x11
    1720:	89 89       	ldd	r24, Y+17	; 0x11
    1722:	9a 89       	ldd	r25, Y+18	; 0x12
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <MODE+0xc0>
    1728:	9a 8b       	std	Y+18, r25	; 0x12
    172a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8b 89       	ldd	r24, Y+19	; 0x13
    172e:	9c 89       	ldd	r25, Y+20	; 0x14
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9c 8b       	std	Y+20, r25	; 0x14
    1734:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8b 89       	ldd	r24, Y+19	; 0x13
    1738:	9c 89       	ldd	r25, Y+20	; 0x14
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <MODE+0xb4>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <MODE+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6d 89       	ldd	r22, Y+21	; 0x15
    1742:	7e 89       	ldd	r23, Y+22	; 0x16
    1744:	8f 89       	ldd	r24, Y+23	; 0x17
    1746:	98 8d       	ldd	r25, Y+24	; 0x18
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9c 8b       	std	Y+20, r25	; 0x14
    1752:	8b 8b       	std	Y+19, r24	; 0x13
    1754:	8b 89       	ldd	r24, Y+19	; 0x13
    1756:	9c 89       	ldd	r25, Y+20	; 0x14
    1758:	98 8b       	std	Y+16, r25	; 0x10
    175a:	8f 87       	std	Y+15, r24	; 0x0f
    175c:	8f 85       	ldd	r24, Y+15	; 0x0f
    175e:	98 89       	ldd	r25, Y+16	; 0x10
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <MODE+0xfc>
    1764:	98 8b       	std	Y+16, r25	; 0x10
    1766:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		if(!(PINB & (1 << PB7))) { // Ensure it's still pressed
    1768:	e6 e3       	ldi	r30, 0x36	; 54
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	88 23       	and	r24, r24
    1770:	0c f4       	brge	.+2      	; 0x1774 <MODE+0x110>
    1772:	85 c0       	rjmp	.+266    	; 0x187e <MODE+0x21a>
			PORTD ^= (1<<PD5) ^ (1<<PD4);
    1774:	a2 e3       	ldi	r26, 0x32	; 50
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	90 81       	ld	r25, Z
    177e:	80 e3       	ldi	r24, 0x30	; 48
    1780:	89 27       	eor	r24, r25
    1782:	8c 93       	st	X, r24
			mode ^= 1; // Toggle between Count Up and Count Down
    1784:	90 91 68 00 	lds	r25, 0x0068
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	89 27       	eor	r24, r25
    178c:	80 93 68 00 	sts	0x0068, r24
			while(!(PINB & (1 << PB7))); // Wait until button is released
    1790:	e6 e3       	ldi	r30, 0x36	; 54
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	88 23       	and	r24, r24
    1798:	dc f7       	brge	.-10     	; 0x1790 <MODE+0x12c>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	8b 87       	std	Y+11, r24	; 0x0b
    17a4:	9c 87       	std	Y+12, r25	; 0x0c
    17a6:	ad 87       	std	Y+13, r26	; 0x0d
    17a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a e7       	ldi	r20, 0x7A	; 122
    17b8:	55 e4       	ldi	r21, 0x45	; 69
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	8f 83       	std	Y+7, r24	; 0x07
    17c4:	98 87       	std	Y+8, r25	; 0x08
    17c6:	a9 87       	std	Y+9, r26	; 0x09
    17c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <MODE+0x188>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <MODE+0x206>
	else if (__tmp > 65535)
    17ec:	6f 81       	ldd	r22, Y+7	; 0x07
    17ee:	78 85       	ldd	r23, Y+8	; 0x08
    17f0:	89 85       	ldd	r24, Y+9	; 0x09
    17f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <MODE+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6b 85       	ldd	r22, Y+11	; 0x0b
    1806:	7c 85       	ldd	r23, Y+12	; 0x0c
    1808:	8d 85       	ldd	r24, Y+13	; 0x0d
    180a:	9e 85       	ldd	r25, Y+14	; 0x0e
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	0f c0       	rjmp	.+30     	; 0x184c <MODE+0x1e8>
    182e:	80 e9       	ldi	r24, 0x90	; 144
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <MODE+0x1d6>
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <MODE+0x1ca>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <MODE+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	6f 81       	ldd	r22, Y+7	; 0x07
    1858:	78 85       	ldd	r23, Y+8	; 0x08
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	9a 85       	ldd	r25, Y+10	; 0x0a
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <MODE+0x212>
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
		}
	}
}
    187e:	6c 96       	adiw	r28, 0x1c	; 28
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <ADJUST_TIME>:

// Adjust time when paused
void ADJUST_TIME(void) {
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	cb 5a       	subi	r28, 0xAB	; 171
    189e:	d0 40       	sbci	r29, 0x00	; 0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
	if (!(TCCR1B & (1 << CS12)) && !(TCCR1B & (1 << CS10))) {
    18aa:	ee e4       	ldi	r30, 0x4E	; 78
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	84 70       	andi	r24, 0x04	; 4
    18b6:	90 70       	andi	r25, 0x00	; 0
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <ADJUST_TIME+0x30>
    18bc:	0c 94 c7 14 	jmp	0x298e	; 0x298e <ADJUST_TIME+0x10fe>
    18c0:	ee e4       	ldi	r30, 0x4E	; 78
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	90 70       	andi	r25, 0x00	; 0
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <ADJUST_TIME+0x46>
    18d2:	0c 94 c7 14 	jmp	0x298e	; 0x298e <ADJUST_TIME+0x10fe>
	        if (!(PINB & (1 << PB0))) {
    18d6:	e6 e3       	ldi	r30, 0x36	; 54
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	81 70       	andi	r24, 0x01	; 1
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	09 f0       	breq	.+2      	; 0x18ea <ADJUST_TIME+0x5a>
    18e8:	96 c1       	rjmp	.+812    	; 0x1c16 <ADJUST_TIME+0x386>
    18ea:	fe 01       	movw	r30, r28
    18ec:	eb 55       	subi	r30, 0x5B	; 91
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	8e 01       	movw	r16, r28
    1902:	0f 55       	subi	r16, 0x5F	; 95
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	eb 55       	subi	r30, 0x5B	; 91
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a e7       	ldi	r20, 0x7A	; 122
    191a:	55 e4       	ldi	r21, 0x45	; 69
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    192e:	fe 01       	movw	r30, r28
    1930:	ef 55       	subi	r30, 0x5F	; 95
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	44 f4       	brge	.+16     	; 0x195c <ADJUST_TIME+0xcc>
		__ticks = 1;
    194c:	fe 01       	movw	r30, r28
    194e:	e1 56       	subi	r30, 0x61	; 97
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	64 c0       	rjmp	.+200    	; 0x1a24 <ADJUST_TIME+0x194>
	else if (__tmp > 65535)
    195c:	fe 01       	movw	r30, r28
    195e:	ef 55       	subi	r30, 0x5F	; 95
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	0c f0       	brlt	.+2      	; 0x197c <ADJUST_TIME+0xec>
    197a:	43 c0       	rjmp	.+134    	; 0x1a02 <ADJUST_TIME+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	fe 01       	movw	r30, r28
    197e:	eb 55       	subi	r30, 0x5B	; 91
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8e 01       	movw	r16, r28
    199c:	01 56       	subi	r16, 0x61	; 97
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	f8 01       	movw	r30, r16
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	1f c0       	rjmp	.+62     	; 0x19f2 <ADJUST_TIME+0x162>
    19b4:	fe 01       	movw	r30, r28
    19b6:	e3 56       	subi	r30, 0x63	; 99
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 e9       	ldi	r24, 0x90	; 144
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	fe 01       	movw	r30, r28
    19c4:	e3 56       	subi	r30, 0x63	; 99
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <ADJUST_TIME+0x13c>
    19d0:	fe 01       	movw	r30, r28
    19d2:	e3 56       	subi	r30, 0x63	; 99
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	de 01       	movw	r26, r28
    19dc:	a1 56       	subi	r26, 0x61	; 97
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e1 56       	subi	r30, 0x61	; 97
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	9c 93       	st	X, r25
    19f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	fe 01       	movw	r30, r28
    19f4:	e1 56       	subi	r30, 0x61	; 97
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	d1 f6       	brne	.-76     	; 0x19b4 <ADJUST_TIME+0x124>
    1a00:	28 c0       	rjmp	.+80     	; 0x1a52 <ADJUST_TIME+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	8e 01       	movw	r16, r28
    1a04:	01 56       	subi	r16, 0x61	; 97
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	fe 01       	movw	r30, r28
    1a0a:	ef 55       	subi	r30, 0x5F	; 95
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	f8 01       	movw	r30, r16
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	de 01       	movw	r26, r28
    1a26:	a5 56       	subi	r26, 0x65	; 101
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e1 56       	subi	r30, 0x61	; 97
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	9c 93       	st	X, r25
    1a38:	8e 93       	st	-X, r24
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e5 56       	subi	r30, 0x65	; 101
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <ADJUST_TIME+0x1b4>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e5 56       	subi	r30, 0x65	; 101
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
	    		_delay_ms(1);
	        	if(!(PINB & (1 << PB0))){
    1a52:	e6 e3       	ldi	r30, 0x36	; 54
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <ADJUST_TIME+0x1d6>
    1a64:	d8 c0       	rjmp	.+432    	; 0x1c16 <ADJUST_TIME+0x386>
	        		 h = (h == 0) ? 23 : h - 1;
    1a66:	80 91 6c 00 	lds	r24, 0x006C
    1a6a:	88 23       	and	r24, r24
    1a6c:	51 f0       	breq	.+20     	; 0x1a82 <ADJUST_TIME+0x1f2>
    1a6e:	80 91 6c 00 	lds	r24, 0x006C
    1a72:	f8 2f       	mov	r31, r24
    1a74:	f1 50       	subi	r31, 0x01	; 1
    1a76:	c5 55       	subi	r28, 0x55	; 85
    1a78:	df 4f       	sbci	r29, 0xFF	; 255
    1a7a:	f8 83       	st	Y, r31
    1a7c:	cb 5a       	subi	r28, 0xAB	; 171
    1a7e:	d0 40       	sbci	r29, 0x00	; 0
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <ADJUST_TIME+0x1fe>
    1a82:	87 e1       	ldi	r24, 0x17	; 23
    1a84:	c5 55       	subi	r28, 0x55	; 85
    1a86:	df 4f       	sbci	r29, 0xFF	; 255
    1a88:	88 83       	st	Y, r24
    1a8a:	cb 5a       	subi	r28, 0xAB	; 171
    1a8c:	d0 40       	sbci	r29, 0x00	; 0
    1a8e:	c5 55       	subi	r28, 0x55	; 85
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	98 81       	ld	r25, Y
    1a94:	cb 5a       	subi	r28, 0xAB	; 171
    1a96:	d0 40       	sbci	r29, 0x00	; 0
    1a98:	90 93 6c 00 	sts	0x006C, r25
	        		 while(!(PINB & (1 << PB0)));
    1a9c:	e6 e3       	ldi	r30, 0x36	; 54
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	81 70       	andi	r24, 0x01	; 1
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	b9 f3       	breq	.-18     	; 0x1a9c <ADJUST_TIME+0x20c>
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e9 56       	subi	r30, 0x69	; 105
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e8       	ldi	r26, 0x80	; 128
    1aba:	bf e3       	ldi	r27, 0x3F	; 63
    1abc:	80 83       	st	Z, r24
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	a2 83       	std	Z+2, r26	; 0x02
    1ac2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac4:	8e 01       	movw	r16, r28
    1ac6:	0d 56       	subi	r16, 0x6D	; 109
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	fe 01       	movw	r30, r28
    1acc:	e9 56       	subi	r30, 0x69	; 105
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a e7       	ldi	r20, 0x7A	; 122
    1ade:	55 e4       	ldi	r21, 0x45	; 69
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	f8 01       	movw	r30, r16
    1aea:	80 83       	st	Z, r24
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	a2 83       	std	Z+2, r26	; 0x02
    1af0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af2:	fe 01       	movw	r30, r28
    1af4:	ed 56       	subi	r30, 0x6D	; 109
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	44 f4       	brge	.+16     	; 0x1b20 <ADJUST_TIME+0x290>
		__ticks = 1;
    1b10:	fe 01       	movw	r30, r28
    1b12:	ef 56       	subi	r30, 0x6F	; 111
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24
    1b1e:	64 c0       	rjmp	.+200    	; 0x1be8 <ADJUST_TIME+0x358>
	else if (__tmp > 65535)
    1b20:	fe 01       	movw	r30, r28
    1b22:	ed 56       	subi	r30, 0x6D	; 109
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	3f ef       	ldi	r19, 0xFF	; 255
    1b32:	4f e7       	ldi	r20, 0x7F	; 127
    1b34:	57 e4       	ldi	r21, 0x47	; 71
    1b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3a:	18 16       	cp	r1, r24
    1b3c:	0c f0       	brlt	.+2      	; 0x1b40 <ADJUST_TIME+0x2b0>
    1b3e:	43 c0       	rjmp	.+134    	; 0x1bc6 <ADJUST_TIME+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b40:	fe 01       	movw	r30, r28
    1b42:	e9 56       	subi	r30, 0x69	; 105
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	60 81       	ld	r22, Z
    1b48:	71 81       	ldd	r23, Z+1	; 0x01
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e2       	ldi	r20, 0x20	; 32
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	8e 01       	movw	r16, r28
    1b60:	0f 56       	subi	r16, 0x6F	; 111
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	f8 01       	movw	r30, r16
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24
    1b76:	1f c0       	rjmp	.+62     	; 0x1bb6 <ADJUST_TIME+0x326>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e1 57       	subi	r30, 0x71	; 113
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 e9       	ldi	r24, 0x90	; 144
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	fe 01       	movw	r30, r28
    1b88:	e1 57       	subi	r30, 0x71	; 113
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <ADJUST_TIME+0x300>
    1b94:	fe 01       	movw	r30, r28
    1b96:	e1 57       	subi	r30, 0x71	; 113
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	de 01       	movw	r26, r28
    1ba0:	af 56       	subi	r26, 0x6F	; 111
    1ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ef 56       	subi	r30, 0x6F	; 111
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	11 96       	adiw	r26, 0x01	; 1
    1bb2:	9c 93       	st	X, r25
    1bb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ef 56       	subi	r30, 0x6F	; 111
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	d1 f6       	brne	.-76     	; 0x1b78 <ADJUST_TIME+0x2e8>
    1bc4:	28 c0       	rjmp	.+80     	; 0x1c16 <ADJUST_TIME+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	0f 56       	subi	r16, 0x6F	; 111
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ed 56       	subi	r30, 0x6D	; 109
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	f8 01       	movw	r30, r16
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	80 83       	st	Z, r24
    1be8:	de 01       	movw	r26, r28
    1bea:	a3 57       	subi	r26, 0x73	; 115
    1bec:	bf 4f       	sbci	r27, 0xFF	; 255
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ef 56       	subi	r30, 0x6F	; 111
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	91 81       	ldd	r25, Z+1	; 0x01
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	9c 93       	st	X, r25
    1bfc:	8e 93       	st	-X, r24
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e3 57       	subi	r30, 0x73	; 115
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <ADJUST_TIME+0x378>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e3 57       	subi	r30, 0x73	; 115
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
	 	    		_delay_ms(1);
	        	}
	        }
	        if (!(PINB & (1 << PB1))) {
    1c16:	e6 e3       	ldi	r30, 0x36	; 54
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	82 70       	andi	r24, 0x02	; 2
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <ADJUST_TIME+0x39a>
    1c28:	87 c1       	rjmp	.+782    	; 0x1f38 <ADJUST_TIME+0x6a8>
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e7 57       	subi	r30, 0x77	; 119
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e8       	ldi	r26, 0x80	; 128
    1c36:	bf e3       	ldi	r27, 0x3F	; 63
    1c38:	80 83       	st	Z, r24
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	a2 83       	std	Z+2, r26	; 0x02
    1c3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	8e 01       	movw	r16, r28
    1c42:	0b 57       	subi	r16, 0x7B	; 123
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
    1c46:	fe 01       	movw	r30, r28
    1c48:	e7 57       	subi	r30, 0x77	; 119
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	60 81       	ld	r22, Z
    1c4e:	71 81       	ldd	r23, Z+1	; 0x01
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	4a e7       	ldi	r20, 0x7A	; 122
    1c5a:	55 e4       	ldi	r21, 0x45	; 69
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	f8 01       	movw	r30, r16
    1c66:	80 83       	st	Z, r24
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	a2 83       	std	Z+2, r26	; 0x02
    1c6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	eb 57       	subi	r30, 0x7B	; 123
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	44 f4       	brge	.+16     	; 0x1c9c <ADJUST_TIME+0x40c>
		__ticks = 1;
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ed 57       	subi	r30, 0x7D	; 125
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	80 83       	st	Z, r24
    1c9a:	64 c0       	rjmp	.+200    	; 0x1d64 <ADJUST_TIME+0x4d4>
	else if (__tmp > 65535)
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	eb 57       	subi	r30, 0x7B	; 123
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	0c f0       	brlt	.+2      	; 0x1cbc <ADJUST_TIME+0x42c>
    1cba:	43 c0       	rjmp	.+134    	; 0x1d42 <ADJUST_TIME+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e7 57       	subi	r30, 0x77	; 119
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8e 01       	movw	r16, r28
    1cdc:	0d 57       	subi	r16, 0x7D	; 125
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	f8 01       	movw	r30, r16
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	1f c0       	rjmp	.+62     	; 0x1d32 <ADJUST_TIME+0x4a2>
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ef 57       	subi	r30, 0x7F	; 127
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 e9       	ldi	r24, 0x90	; 144
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	80 83       	st	Z, r24
    1d02:	fe 01       	movw	r30, r28
    1d04:	ef 57       	subi	r30, 0x7F	; 127
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <ADJUST_TIME+0x47c>
    1d10:	fe 01       	movw	r30, r28
    1d12:	ef 57       	subi	r30, 0x7F	; 127
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	de 01       	movw	r26, r28
    1d1c:	ad 57       	subi	r26, 0x7D	; 125
    1d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d20:	fe 01       	movw	r30, r28
    1d22:	ed 57       	subi	r30, 0x7D	; 125
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	91 81       	ldd	r25, Z+1	; 0x01
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	11 96       	adiw	r26, 0x01	; 1
    1d2e:	9c 93       	st	X, r25
    1d30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 57       	subi	r30, 0x7D	; 125
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	d1 f6       	brne	.-76     	; 0x1cf4 <ADJUST_TIME+0x464>
    1d40:	28 c0       	rjmp	.+80     	; 0x1d92 <ADJUST_TIME+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d42:	8e 01       	movw	r16, r28
    1d44:	0d 57       	subi	r16, 0x7D	; 125
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	eb 57       	subi	r30, 0x7B	; 123
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	f8 01       	movw	r30, r16
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	80 83       	st	Z, r24
    1d64:	de 01       	movw	r26, r28
    1d66:	a1 58       	subi	r26, 0x81	; 129
    1d68:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ed 57       	subi	r30, 0x7D	; 125
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	9c 93       	st	X, r25
    1d78:	8e 93       	st	-X, r24
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e1 58       	subi	r30, 0x81	; 129
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <ADJUST_TIME+0x4f4>
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e1 58       	subi	r30, 0x81	; 129
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
	        	_delay_ms(1);
	        	 if (!(PINB & (1 << PB1))){
    1d92:	e6 e3       	ldi	r30, 0x36	; 54
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	82 70       	andi	r24, 0x02	; 2
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <ADJUST_TIME+0x516>
    1da4:	c9 c0       	rjmp	.+402    	; 0x1f38 <ADJUST_TIME+0x6a8>
	        		 h = (h + 1) % 24;
    1da6:	80 91 6c 00 	lds	r24, 0x006C
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	28 e1       	ldi	r18, 0x18	; 24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	b9 01       	movw	r22, r18
    1db6:	0e 94 df 14 	call	0x29be	; 0x29be <__divmodhi4>
    1dba:	80 93 6c 00 	sts	0x006C, r24
	        		 while(!(PINB & (1 << PB1)));
    1dbe:	e6 e3       	ldi	r30, 0x36	; 54
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	82 70       	andi	r24, 0x02	; 2
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	b9 f3       	breq	.-18     	; 0x1dbe <ADJUST_TIME+0x52e>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e5 58       	subi	r30, 0x85	; 133
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e8       	ldi	r26, 0x80	; 128
    1ddc:	bf e3       	ldi	r27, 0x3F	; 63
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	8e 01       	movw	r16, r28
    1de8:	09 58       	subi	r16, 0x89	; 137
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	fe 01       	movw	r30, r28
    1dee:	e5 58       	subi	r30, 0x85	; 133
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	4a e7       	ldi	r20, 0x7A	; 122
    1e00:	55 e4       	ldi	r21, 0x45	; 69
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	80 83       	st	Z, r24
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	a2 83       	std	Z+2, r26	; 0x02
    1e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e14:	fe 01       	movw	r30, r28
    1e16:	e9 58       	subi	r30, 0x89	; 137
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	44 f4       	brge	.+16     	; 0x1e42 <ADJUST_TIME+0x5b2>
		__ticks = 1;
    1e32:	fe 01       	movw	r30, r28
    1e34:	eb 58       	subi	r30, 0x8B	; 139
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
    1e40:	64 c0       	rjmp	.+200    	; 0x1f0a <ADJUST_TIME+0x67a>
	else if (__tmp > 65535)
    1e42:	fe 01       	movw	r30, r28
    1e44:	e9 58       	subi	r30, 0x89	; 137
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	0c f0       	brlt	.+2      	; 0x1e62 <ADJUST_TIME+0x5d2>
    1e60:	43 c0       	rjmp	.+134    	; 0x1ee8 <ADJUST_TIME+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	fe 01       	movw	r30, r28
    1e64:	e5 58       	subi	r30, 0x85	; 133
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8e 01       	movw	r16, r28
    1e82:	0b 58       	subi	r16, 0x8B	; 139
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	1f c0       	rjmp	.+62     	; 0x1ed8 <ADJUST_TIME+0x648>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ed 58       	subi	r30, 0x8D	; 141
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 e9       	ldi	r24, 0x90	; 144
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	ed 58       	subi	r30, 0x8D	; 141
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <ADJUST_TIME+0x622>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 58       	subi	r30, 0x8D	; 141
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	de 01       	movw	r26, r28
    1ec2:	ab 58       	subi	r26, 0x8B	; 139
    1ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	eb 58       	subi	r30, 0x8B	; 139
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	11 96       	adiw	r26, 0x01	; 1
    1ed4:	9c 93       	st	X, r25
    1ed6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	fe 01       	movw	r30, r28
    1eda:	eb 58       	subi	r30, 0x8B	; 139
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	d1 f6       	brne	.-76     	; 0x1e9a <ADJUST_TIME+0x60a>
    1ee6:	28 c0       	rjmp	.+80     	; 0x1f38 <ADJUST_TIME+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	8e 01       	movw	r16, r28
    1eea:	0b 58       	subi	r16, 0x8B	; 139
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e9 58       	subi	r30, 0x89	; 137
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	de 01       	movw	r26, r28
    1f0c:	af 58       	subi	r26, 0x8F	; 143
    1f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	eb 58       	subi	r30, 0x8B	; 139
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	11 96       	adiw	r26, 0x01	; 1
    1f1c:	9c 93       	st	X, r25
    1f1e:	8e 93       	st	-X, r24
    1f20:	fe 01       	movw	r30, r28
    1f22:	ef 58       	subi	r30, 0x8F	; 143
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <ADJUST_TIME+0x69a>
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ef 58       	subi	r30, 0x8F	; 143
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
	        		 _delay_ms(1);
	        	 }
	        }
	        if (!(PINB & (1 << PB3))) {
    1f38:	e6 e3       	ldi	r30, 0x36	; 54
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	88 70       	andi	r24, 0x08	; 8
    1f44:	90 70       	andi	r25, 0x00	; 0
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <ADJUST_TIME+0x6bc>
    1f4a:	96 c1       	rjmp	.+812    	; 0x2278 <ADJUST_TIME+0x9e8>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e3 59       	subi	r30, 0x93	; 147
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e8       	ldi	r26, 0x80	; 128
    1f58:	bf e3       	ldi	r27, 0x3F	; 63
    1f5a:	80 83       	st	Z, r24
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	a2 83       	std	Z+2, r26	; 0x02
    1f60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	8e 01       	movw	r16, r28
    1f64:	07 59       	subi	r16, 0x97	; 151
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e3 59       	subi	r30, 0x93	; 147
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a e7       	ldi	r20, 0x7A	; 122
    1f7c:	55 e4       	ldi	r21, 0x45	; 69
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	f8 01       	movw	r30, r16
    1f88:	80 83       	st	Z, r24
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	a2 83       	std	Z+2, r26	; 0x02
    1f8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f90:	fe 01       	movw	r30, r28
    1f92:	e7 59       	subi	r30, 0x97	; 151
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	44 f4       	brge	.+16     	; 0x1fbe <ADJUST_TIME+0x72e>
		__ticks = 1;
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e9 59       	subi	r30, 0x99	; 153
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	64 c0       	rjmp	.+200    	; 0x2086 <ADJUST_TIME+0x7f6>
	else if (__tmp > 65535)
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e7 59       	subi	r30, 0x97	; 151
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	3f ef       	ldi	r19, 0xFF	; 255
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	57 e4       	ldi	r21, 0x47	; 71
    1fd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	0c f0       	brlt	.+2      	; 0x1fde <ADJUST_TIME+0x74e>
    1fdc:	43 c0       	rjmp	.+134    	; 0x2064 <ADJUST_TIME+0x7d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e3 59       	subi	r30, 0x93	; 147
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	60 81       	ld	r22, Z
    1fe6:	71 81       	ldd	r23, Z+1	; 0x01
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8e 01       	movw	r16, r28
    1ffe:	09 59       	subi	r16, 0x99	; 153
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	f8 01       	movw	r30, r16
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	80 83       	st	Z, r24
    2014:	1f c0       	rjmp	.+62     	; 0x2054 <ADJUST_TIME+0x7c4>
    2016:	fe 01       	movw	r30, r28
    2018:	eb 59       	subi	r30, 0x9B	; 155
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 e9       	ldi	r24, 0x90	; 144
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	80 83       	st	Z, r24
    2024:	fe 01       	movw	r30, r28
    2026:	eb 59       	subi	r30, 0x9B	; 155
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <ADJUST_TIME+0x79e>
    2032:	fe 01       	movw	r30, r28
    2034:	eb 59       	subi	r30, 0x9B	; 155
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	de 01       	movw	r26, r28
    203e:	a9 59       	subi	r26, 0x99	; 153
    2040:	bf 4f       	sbci	r27, 0xFF	; 255
    2042:	fe 01       	movw	r30, r28
    2044:	e9 59       	subi	r30, 0x99	; 153
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	11 96       	adiw	r26, 0x01	; 1
    2050:	9c 93       	st	X, r25
    2052:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	fe 01       	movw	r30, r28
    2056:	e9 59       	subi	r30, 0x99	; 153
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	d1 f6       	brne	.-76     	; 0x2016 <ADJUST_TIME+0x786>
    2062:	28 c0       	rjmp	.+80     	; 0x20b4 <ADJUST_TIME+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	8e 01       	movw	r16, r28
    2066:	09 59       	subi	r16, 0x99	; 153
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	fe 01       	movw	r30, r28
    206c:	e7 59       	subi	r30, 0x97	; 151
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	f8 01       	movw	r30, r16
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	de 01       	movw	r26, r28
    2088:	ad 59       	subi	r26, 0x9D	; 157
    208a:	bf 4f       	sbci	r27, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e9 59       	subi	r30, 0x99	; 153
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	11 96       	adiw	r26, 0x01	; 1
    2098:	9c 93       	st	X, r25
    209a:	8e 93       	st	-X, r24
    209c:	fe 01       	movw	r30, r28
    209e:	ed 59       	subi	r30, 0x9D	; 157
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <ADJUST_TIME+0x816>
    20aa:	fe 01       	movw	r30, r28
    20ac:	ed 59       	subi	r30, 0x9D	; 157
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
	        	_delay_ms(1);
	        	if (!(PINB & (1 << PB3))){
    20b4:	e6 e3       	ldi	r30, 0x36	; 54
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	88 70       	andi	r24, 0x08	; 8
    20c0:	90 70       	andi	r25, 0x00	; 0
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <ADJUST_TIME+0x838>
    20c6:	d8 c0       	rjmp	.+432    	; 0x2278 <ADJUST_TIME+0x9e8>
	        		m = (m == 0) ? 59 : m - 1;
    20c8:	80 91 6b 00 	lds	r24, 0x006B
    20cc:	88 23       	and	r24, r24
    20ce:	51 f0       	breq	.+20     	; 0x20e4 <ADJUST_TIME+0x854>
    20d0:	80 91 6b 00 	lds	r24, 0x006B
    20d4:	f8 2f       	mov	r31, r24
    20d6:	f1 50       	subi	r31, 0x01	; 1
    20d8:	c6 55       	subi	r28, 0x56	; 86
    20da:	df 4f       	sbci	r29, 0xFF	; 255
    20dc:	f8 83       	st	Y, r31
    20de:	ca 5a       	subi	r28, 0xAA	; 170
    20e0:	d0 40       	sbci	r29, 0x00	; 0
    20e2:	06 c0       	rjmp	.+12     	; 0x20f0 <ADJUST_TIME+0x860>
    20e4:	8b e3       	ldi	r24, 0x3B	; 59
    20e6:	c6 55       	subi	r28, 0x56	; 86
    20e8:	df 4f       	sbci	r29, 0xFF	; 255
    20ea:	88 83       	st	Y, r24
    20ec:	ca 5a       	subi	r28, 0xAA	; 170
    20ee:	d0 40       	sbci	r29, 0x00	; 0
    20f0:	c6 55       	subi	r28, 0x56	; 86
    20f2:	df 4f       	sbci	r29, 0xFF	; 255
    20f4:	98 81       	ld	r25, Y
    20f6:	ca 5a       	subi	r28, 0xAA	; 170
    20f8:	d0 40       	sbci	r29, 0x00	; 0
    20fa:	90 93 6b 00 	sts	0x006B, r25
	        		while(!(PINB & (1 << PB3)));
    20fe:	e6 e3       	ldi	r30, 0x36	; 54
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	88 70       	andi	r24, 0x08	; 8
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	b9 f3       	breq	.-18     	; 0x20fe <ADJUST_TIME+0x86e>
    2110:	fe 01       	movw	r30, r28
    2112:	e1 5a       	subi	r30, 0xA1	; 161
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 e8       	ldi	r26, 0x80	; 128
    211c:	bf e3       	ldi	r27, 0x3F	; 63
    211e:	80 83       	st	Z, r24
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	a2 83       	std	Z+2, r26	; 0x02
    2124:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	8e 01       	movw	r16, r28
    2128:	05 5a       	subi	r16, 0xA5	; 165
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	fe 01       	movw	r30, r28
    212e:	e1 5a       	subi	r30, 0xA1	; 161
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a e7       	ldi	r20, 0x7A	; 122
    2140:	55 e4       	ldi	r21, 0x45	; 69
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	f8 01       	movw	r30, r16
    214c:	80 83       	st	Z, r24
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	a2 83       	std	Z+2, r26	; 0x02
    2152:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2154:	fe 01       	movw	r30, r28
    2156:	e5 5a       	subi	r30, 0xA5	; 165
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	44 f4       	brge	.+16     	; 0x2182 <ADJUST_TIME+0x8f2>
		__ticks = 1;
    2172:	fe 01       	movw	r30, r28
    2174:	e7 5a       	subi	r30, 0xA7	; 167
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	64 c0       	rjmp	.+200    	; 0x224a <ADJUST_TIME+0x9ba>
	else if (__tmp > 65535)
    2182:	fe 01       	movw	r30, r28
    2184:	e5 5a       	subi	r30, 0xA5	; 165
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	0c f0       	brlt	.+2      	; 0x21a2 <ADJUST_TIME+0x912>
    21a0:	43 c0       	rjmp	.+134    	; 0x2228 <ADJUST_TIME+0x998>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	fe 01       	movw	r30, r28
    21a4:	e1 5a       	subi	r30, 0xA1	; 161
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8e 01       	movw	r16, r28
    21c2:	07 5a       	subi	r16, 0xA7	; 167
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	1f c0       	rjmp	.+62     	; 0x2218 <ADJUST_TIME+0x988>
    21da:	fe 01       	movw	r30, r28
    21dc:	e9 5a       	subi	r30, 0xA9	; 169
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 e9       	ldi	r24, 0x90	; 144
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	fe 01       	movw	r30, r28
    21ea:	e9 5a       	subi	r30, 0xA9	; 169
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <ADJUST_TIME+0x962>
    21f6:	fe 01       	movw	r30, r28
    21f8:	e9 5a       	subi	r30, 0xA9	; 169
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	de 01       	movw	r26, r28
    2202:	a7 5a       	subi	r26, 0xA7	; 167
    2204:	bf 4f       	sbci	r27, 0xFF	; 255
    2206:	fe 01       	movw	r30, r28
    2208:	e7 5a       	subi	r30, 0xA7	; 167
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	11 96       	adiw	r26, 0x01	; 1
    2214:	9c 93       	st	X, r25
    2216:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	fe 01       	movw	r30, r28
    221a:	e7 5a       	subi	r30, 0xA7	; 167
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	d1 f6       	brne	.-76     	; 0x21da <ADJUST_TIME+0x94a>
    2226:	28 c0       	rjmp	.+80     	; 0x2278 <ADJUST_TIME+0x9e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	8e 01       	movw	r16, r28
    222a:	07 5a       	subi	r16, 0xA7	; 167
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	e5 5a       	subi	r30, 0xA5	; 165
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    224a:	de 01       	movw	r26, r28
    224c:	ab 5a       	subi	r26, 0xAB	; 171
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e7 5a       	subi	r30, 0xA7	; 167
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	11 96       	adiw	r26, 0x01	; 1
    225c:	9c 93       	st	X, r25
    225e:	8e 93       	st	-X, r24
    2260:	fe 01       	movw	r30, r28
    2262:	eb 5a       	subi	r30, 0xAB	; 171
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <ADJUST_TIME+0x9da>
    226e:	fe 01       	movw	r30, r28
    2270:	eb 5a       	subi	r30, 0xAB	; 171
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24
		        	_delay_ms(1);
	        	}
	        }
	        if (!(PINB & (1 << PB4))) {
    2278:	e6 e3       	ldi	r30, 0x36	; 54
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	80 71       	andi	r24, 0x10	; 16
    2284:	90 70       	andi	r25, 0x00	; 0
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	09 f0       	breq	.+2      	; 0x228c <ADJUST_TIME+0x9fc>
    228a:	58 c1       	rjmp	.+688    	; 0x253c <ADJUST_TIME+0xcac>
    228c:	fe 01       	movw	r30, r28
    228e:	ef 5a       	subi	r30, 0xAF	; 175
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e8       	ldi	r26, 0x80	; 128
    2298:	bf e3       	ldi	r27, 0x3F	; 63
    229a:	80 83       	st	Z, r24
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	a2 83       	std	Z+2, r26	; 0x02
    22a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	8e 01       	movw	r16, r28
    22a4:	03 5b       	subi	r16, 0xB3	; 179
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	fe 01       	movw	r30, r28
    22aa:	ef 5a       	subi	r30, 0xAF	; 175
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a e7       	ldi	r20, 0x7A	; 122
    22bc:	55 e4       	ldi	r21, 0x45	; 69
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	f8 01       	movw	r30, r16
    22c8:	80 83       	st	Z, r24
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	a2 83       	std	Z+2, r26	; 0x02
    22ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d0:	fe 01       	movw	r30, r28
    22d2:	e3 5b       	subi	r30, 0xB3	; 179
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	60 81       	ld	r22, Z
    22d8:	71 81       	ldd	r23, Z+1	; 0x01
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	44 f4       	brge	.+16     	; 0x22fe <ADJUST_TIME+0xa6e>
		__ticks = 1;
    22ee:	fe 01       	movw	r30, r28
    22f0:	e5 5b       	subi	r30, 0xB5	; 181
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	64 c0       	rjmp	.+200    	; 0x23c6 <ADJUST_TIME+0xb36>
	else if (__tmp > 65535)
    22fe:	fe 01       	movw	r30, r28
    2300:	e3 5b       	subi	r30, 0xB3	; 179
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	3f ef       	ldi	r19, 0xFF	; 255
    2310:	4f e7       	ldi	r20, 0x7F	; 127
    2312:	57 e4       	ldi	r21, 0x47	; 71
    2314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2318:	18 16       	cp	r1, r24
    231a:	0c f0       	brlt	.+2      	; 0x231e <ADJUST_TIME+0xa8e>
    231c:	43 c0       	rjmp	.+134    	; 0x23a4 <ADJUST_TIME+0xb14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	fe 01       	movw	r30, r28
    2320:	ef 5a       	subi	r30, 0xAF	; 175
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	8e 01       	movw	r16, r28
    233e:	05 5b       	subi	r16, 0xB5	; 181
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	f8 01       	movw	r30, r16
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
    2354:	1f c0       	rjmp	.+62     	; 0x2394 <ADJUST_TIME+0xb04>
    2356:	fe 01       	movw	r30, r28
    2358:	e7 5b       	subi	r30, 0xB7	; 183
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 e9       	ldi	r24, 0x90	; 144
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
    2364:	fe 01       	movw	r30, r28
    2366:	e7 5b       	subi	r30, 0xB7	; 183
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <ADJUST_TIME+0xade>
    2372:	fe 01       	movw	r30, r28
    2374:	e7 5b       	subi	r30, 0xB7	; 183
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237c:	de 01       	movw	r26, r28
    237e:	a5 5b       	subi	r26, 0xB5	; 181
    2380:	bf 4f       	sbci	r27, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e5 5b       	subi	r30, 0xB5	; 181
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	11 96       	adiw	r26, 0x01	; 1
    2390:	9c 93       	st	X, r25
    2392:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	fe 01       	movw	r30, r28
    2396:	e5 5b       	subi	r30, 0xB5	; 181
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	91 81       	ldd	r25, Z+1	; 0x01
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	d1 f6       	brne	.-76     	; 0x2356 <ADJUST_TIME+0xac6>
    23a2:	28 c0       	rjmp	.+80     	; 0x23f4 <ADJUST_TIME+0xb64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	8e 01       	movw	r16, r28
    23a6:	05 5b       	subi	r16, 0xB5	; 181
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	fe 01       	movw	r30, r28
    23ac:	e3 5b       	subi	r30, 0xB3	; 179
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	f8 01       	movw	r30, r16
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
    23c6:	de 01       	movw	r26, r28
    23c8:	a9 5b       	subi	r26, 0xB9	; 185
    23ca:	bf 4f       	sbci	r27, 0xFF	; 255
    23cc:	fe 01       	movw	r30, r28
    23ce:	e5 5b       	subi	r30, 0xB5	; 181
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	91 81       	ldd	r25, Z+1	; 0x01
    23d6:	11 96       	adiw	r26, 0x01	; 1
    23d8:	9c 93       	st	X, r25
    23da:	8e 93       	st	-X, r24
    23dc:	fe 01       	movw	r30, r28
    23de:	e9 5b       	subi	r30, 0xB9	; 185
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <ADJUST_TIME+0xb56>
    23ea:	fe 01       	movw	r30, r28
    23ec:	e9 5b       	subi	r30, 0xB9	; 185
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
	        	_delay_ms(1);
	        	if (!(PINB & (1 << PB4))){
    23f4:	e6 e3       	ldi	r30, 0x36	; 54
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	80 71       	andi	r24, 0x10	; 16
    2400:	90 70       	andi	r25, 0x00	; 0
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	09 f0       	breq	.+2      	; 0x2408 <ADJUST_TIME+0xb78>
    2406:	9a c0       	rjmp	.+308    	; 0x253c <ADJUST_TIME+0xcac>
	        		   m = (m + 1) % 60;
    2408:	80 91 6b 00 	lds	r24, 0x006B
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	2c e3       	ldi	r18, 0x3C	; 60
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	b9 01       	movw	r22, r18
    2418:	0e 94 df 14 	call	0x29be	; 0x29be <__divmodhi4>
    241c:	80 93 6b 00 	sts	0x006B, r24
	        		   while(!(PINB & (1 << PB4)));
    2420:	e6 e3       	ldi	r30, 0x36	; 54
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	80 71       	andi	r24, 0x10	; 16
    242c:	90 70       	andi	r25, 0x00	; 0
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	b9 f3       	breq	.-18     	; 0x2420 <ADJUST_TIME+0xb90>
    2432:	fe 01       	movw	r30, r28
    2434:	ed 5b       	subi	r30, 0xBD	; 189
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e8       	ldi	r26, 0x80	; 128
    243e:	bf e3       	ldi	r27, 0x3F	; 63
    2440:	80 83       	st	Z, r24
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	8e 01       	movw	r16, r28
    244a:	01 5c       	subi	r16, 0xC1	; 193
    244c:	1f 4f       	sbci	r17, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	ed 5b       	subi	r30, 0xBD	; 189
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a e7       	ldi	r20, 0x7A	; 122
    2462:	55 e4       	ldi	r21, 0x45	; 69
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	80 83       	st	Z, r24
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	a2 83       	std	Z+2, r26	; 0x02
    2474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2476:	fe 01       	movw	r30, r28
    2478:	ff 96       	adiw	r30, 0x3f	; 63
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	2c f4       	brge	.+10     	; 0x249c <ADJUST_TIME+0xc0c>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9e af       	std	Y+62, r25	; 0x3e
    2498:	8d af       	std	Y+61, r24	; 0x3d
    249a:	46 c0       	rjmp	.+140    	; 0x2528 <ADJUST_TIME+0xc98>
	else if (__tmp > 65535)
    249c:	fe 01       	movw	r30, r28
    249e:	ff 96       	adiw	r30, 0x3f	; 63
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	64 f5       	brge	.+88     	; 0x2510 <ADJUST_TIME+0xc80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	fe 01       	movw	r30, r28
    24ba:	ed 5b       	subi	r30, 0xBD	; 189
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e2       	ldi	r20, 0x20	; 32
    24cc:	51 e4       	ldi	r21, 0x41	; 65
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e af       	std	Y+62, r25	; 0x3e
    24e4:	8d af       	std	Y+61, r24	; 0x3d
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <ADJUST_TIME+0xc76>
    24e8:	80 e9       	ldi	r24, 0x90	; 144
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	9c af       	std	Y+60, r25	; 0x3c
    24ee:	8b af       	std	Y+59, r24	; 0x3b
    24f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <ADJUST_TIME+0xc64>
    24f8:	9c af       	std	Y+60, r25	; 0x3c
    24fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9e af       	std	Y+62, r25	; 0x3e
    2504:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	8d ad       	ldd	r24, Y+61	; 0x3d
    2508:	9e ad       	ldd	r25, Y+62	; 0x3e
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f7       	brne	.-38     	; 0x24e8 <ADJUST_TIME+0xc58>
    250e:	16 c0       	rjmp	.+44     	; 0x253c <ADJUST_TIME+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	fe 01       	movw	r30, r28
    2512:	ff 96       	adiw	r30, 0x3f	; 63
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9e af       	std	Y+62, r25	; 0x3e
    2526:	8d af       	std	Y+61, r24	; 0x3d
    2528:	8d ad       	ldd	r24, Y+61	; 0x3d
    252a:	9e ad       	ldd	r25, Y+62	; 0x3e
    252c:	9a af       	std	Y+58, r25	; 0x3a
    252e:	89 af       	std	Y+57, r24	; 0x39
    2530:	89 ad       	ldd	r24, Y+57	; 0x39
    2532:	9a ad       	ldd	r25, Y+58	; 0x3a
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <ADJUST_TIME+0xca4>
    2538:	9a af       	std	Y+58, r25	; 0x3a
    253a:	89 af       	std	Y+57, r24	; 0x39
			        	_delay_ms(1);
	        	}
	        }
	        if (!(PINB & (1 << PB5))) {
    253c:	e6 e3       	ldi	r30, 0x36	; 54
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	80 72       	andi	r24, 0x20	; 32
    2548:	90 70       	andi	r25, 0x00	; 0
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	09 f0       	breq	.+2      	; 0x2550 <ADJUST_TIME+0xcc0>
    254e:	12 c1       	rjmp	.+548    	; 0x2774 <ADJUST_TIME+0xee4>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e8       	ldi	r26, 0x80	; 128
    2556:	bf e3       	ldi	r27, 0x3F	; 63
    2558:	8d ab       	std	Y+53, r24	; 0x35
    255a:	9e ab       	std	Y+54, r25	; 0x36
    255c:	af ab       	std	Y+55, r26	; 0x37
    255e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2560:	6d a9       	ldd	r22, Y+53	; 0x35
    2562:	7e a9       	ldd	r23, Y+54	; 0x36
    2564:	8f a9       	ldd	r24, Y+55	; 0x37
    2566:	98 ad       	ldd	r25, Y+56	; 0x38
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4a e7       	ldi	r20, 0x7A	; 122
    256e:	55 e4       	ldi	r21, 0x45	; 69
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	89 ab       	std	Y+49, r24	; 0x31
    257a:	9a ab       	std	Y+50, r25	; 0x32
    257c:	ab ab       	std	Y+51, r26	; 0x33
    257e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2580:	69 a9       	ldd	r22, Y+49	; 0x31
    2582:	7a a9       	ldd	r23, Y+50	; 0x32
    2584:	8b a9       	ldd	r24, Y+51	; 0x33
    2586:	9c a9       	ldd	r25, Y+52	; 0x34
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	2c f4       	brge	.+10     	; 0x25a2 <ADJUST_TIME+0xd12>
		__ticks = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	98 ab       	std	Y+48, r25	; 0x30
    259e:	8f a7       	std	Y+47, r24	; 0x2f
    25a0:	3f c0       	rjmp	.+126    	; 0x2620 <ADJUST_TIME+0xd90>
	else if (__tmp > 65535)
    25a2:	69 a9       	ldd	r22, Y+49	; 0x31
    25a4:	7a a9       	ldd	r23, Y+50	; 0x32
    25a6:	8b a9       	ldd	r24, Y+51	; 0x33
    25a8:	9c a9       	ldd	r25, Y+52	; 0x34
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	57 e4       	ldi	r21, 0x47	; 71
    25b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	4c f5       	brge	.+82     	; 0x260c <ADJUST_TIME+0xd7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ba:	6d a9       	ldd	r22, Y+53	; 0x35
    25bc:	7e a9       	ldd	r23, Y+54	; 0x36
    25be:	8f a9       	ldd	r24, Y+55	; 0x37
    25c0:	98 ad       	ldd	r25, Y+56	; 0x38
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	51 e4       	ldi	r21, 0x41	; 65
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	98 ab       	std	Y+48, r25	; 0x30
    25e0:	8f a7       	std	Y+47, r24	; 0x2f
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <ADJUST_TIME+0xd72>
    25e4:	80 e9       	ldi	r24, 0x90	; 144
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	9e a7       	std	Y+46, r25	; 0x2e
    25ea:	8d a7       	std	Y+45, r24	; 0x2d
    25ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <ADJUST_TIME+0xd60>
    25f4:	9e a7       	std	Y+46, r25	; 0x2e
    25f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fa:	98 a9       	ldd	r25, Y+48	; 0x30
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	98 ab       	std	Y+48, r25	; 0x30
    2600:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2602:	8f a5       	ldd	r24, Y+47	; 0x2f
    2604:	98 a9       	ldd	r25, Y+48	; 0x30
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	69 f7       	brne	.-38     	; 0x25e4 <ADJUST_TIME+0xd54>
    260a:	14 c0       	rjmp	.+40     	; 0x2634 <ADJUST_TIME+0xda4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	69 a9       	ldd	r22, Y+49	; 0x31
    260e:	7a a9       	ldd	r23, Y+50	; 0x32
    2610:	8b a9       	ldd	r24, Y+51	; 0x33
    2612:	9c a9       	ldd	r25, Y+52	; 0x34
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	98 ab       	std	Y+48, r25	; 0x30
    261e:	8f a7       	std	Y+47, r24	; 0x2f
    2620:	8f a5       	ldd	r24, Y+47	; 0x2f
    2622:	98 a9       	ldd	r25, Y+48	; 0x30
    2624:	9c a7       	std	Y+44, r25	; 0x2c
    2626:	8b a7       	std	Y+43, r24	; 0x2b
    2628:	8b a5       	ldd	r24, Y+43	; 0x2b
    262a:	9c a5       	ldd	r25, Y+44	; 0x2c
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <ADJUST_TIME+0xd9c>
    2630:	9c a7       	std	Y+44, r25	; 0x2c
    2632:	8b a7       	std	Y+43, r24	; 0x2b
	        	_delay_ms(1);
	        	if (!(PINB & (1 << PB5))){
    2634:	e6 e3       	ldi	r30, 0x36	; 54
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 2f       	mov	r24, r24
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	80 72       	andi	r24, 0x20	; 32
    2640:	90 70       	andi	r25, 0x00	; 0
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	09 f0       	breq	.+2      	; 0x2648 <ADJUST_TIME+0xdb8>
    2646:	96 c0       	rjmp	.+300    	; 0x2774 <ADJUST_TIME+0xee4>
		            s = (s == 0) ? 59 : s - 1;
    2648:	80 91 6a 00 	lds	r24, 0x006A
    264c:	88 23       	and	r24, r24
    264e:	51 f0       	breq	.+20     	; 0x2664 <ADJUST_TIME+0xdd4>
    2650:	80 91 6a 00 	lds	r24, 0x006A
    2654:	f8 2f       	mov	r31, r24
    2656:	f1 50       	subi	r31, 0x01	; 1
    2658:	c7 55       	subi	r28, 0x57	; 87
    265a:	df 4f       	sbci	r29, 0xFF	; 255
    265c:	f8 83       	st	Y, r31
    265e:	c9 5a       	subi	r28, 0xA9	; 169
    2660:	d0 40       	sbci	r29, 0x00	; 0
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <ADJUST_TIME+0xde0>
    2664:	8b e3       	ldi	r24, 0x3B	; 59
    2666:	c7 55       	subi	r28, 0x57	; 87
    2668:	df 4f       	sbci	r29, 0xFF	; 255
    266a:	88 83       	st	Y, r24
    266c:	c9 5a       	subi	r28, 0xA9	; 169
    266e:	d0 40       	sbci	r29, 0x00	; 0
    2670:	c7 55       	subi	r28, 0x57	; 87
    2672:	df 4f       	sbci	r29, 0xFF	; 255
    2674:	98 81       	ld	r25, Y
    2676:	c9 5a       	subi	r28, 0xA9	; 169
    2678:	d0 40       	sbci	r29, 0x00	; 0
    267a:	90 93 6a 00 	sts	0x006A, r25
	        		while(!(PINB & (1 << PB5)));
    267e:	e6 e3       	ldi	r30, 0x36	; 54
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	80 72       	andi	r24, 0x20	; 32
    268a:	90 70       	andi	r25, 0x00	; 0
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	b9 f3       	breq	.-18     	; 0x267e <ADJUST_TIME+0xdee>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 e8       	ldi	r26, 0x80	; 128
    2696:	bf e3       	ldi	r27, 0x3F	; 63
    2698:	8f a3       	std	Y+39, r24	; 0x27
    269a:	98 a7       	std	Y+40, r25	; 0x28
    269c:	a9 a7       	std	Y+41, r26	; 0x29
    269e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6f a1       	ldd	r22, Y+39	; 0x27
    26a2:	78 a5       	ldd	r23, Y+40	; 0x28
    26a4:	89 a5       	ldd	r24, Y+41	; 0x29
    26a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a e7       	ldi	r20, 0x7A	; 122
    26ae:	55 e4       	ldi	r21, 0x45	; 69
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8b a3       	std	Y+35, r24	; 0x23
    26ba:	9c a3       	std	Y+36, r25	; 0x24
    26bc:	ad a3       	std	Y+37, r26	; 0x25
    26be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <ADJUST_TIME+0xe52>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9a a3       	std	Y+34, r25	; 0x22
    26de:	89 a3       	std	Y+33, r24	; 0x21
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <ADJUST_TIME+0xed0>
	else if (__tmp > 65535)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <ADJUST_TIME+0xebc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6f a1       	ldd	r22, Y+39	; 0x27
    26fc:	78 a5       	ldd	r23, Y+40	; 0x28
    26fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2700:	9a a5       	ldd	r25, Y+42	; 0x2a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9a a3       	std	Y+34, r25	; 0x22
    2720:	89 a3       	std	Y+33, r24	; 0x21
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <ADJUST_TIME+0xeb2>
    2724:	80 e9       	ldi	r24, 0x90	; 144
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	98 a3       	std	Y+32, r25	; 0x20
    272a:	8f 8f       	std	Y+31, r24	; 0x1f
    272c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272e:	98 a1       	ldd	r25, Y+32	; 0x20
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <ADJUST_TIME+0xea0>
    2734:	98 a3       	std	Y+32, r25	; 0x20
    2736:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	89 a1       	ldd	r24, Y+33	; 0x21
    2744:	9a a1       	ldd	r25, Y+34	; 0x22
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <ADJUST_TIME+0xe94>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <ADJUST_TIME+0xee4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	6b a1       	ldd	r22, Y+35	; 0x23
    274e:	7c a1       	ldd	r23, Y+36	; 0x24
    2750:	8d a1       	ldd	r24, Y+37	; 0x25
    2752:	9e a1       	ldd	r25, Y+38	; 0x26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
    2760:	89 a1       	ldd	r24, Y+33	; 0x21
    2762:	9a a1       	ldd	r25, Y+34	; 0x22
    2764:	9e 8f       	std	Y+30, r25	; 0x1e
    2766:	8d 8f       	std	Y+29, r24	; 0x1d
    2768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    276a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <ADJUST_TIME+0xedc>
    2770:	9e 8f       	std	Y+30, r25	; 0x1e
    2772:	8d 8f       	std	Y+29, r24	; 0x1d
		        	_delay_ms(1);
	        	 }
	        }
	        if (!(PINB & (1 << PB6))) {
    2774:	e6 e3       	ldi	r30, 0x36	; 54
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	80 74       	andi	r24, 0x40	; 64
    2780:	90 70       	andi	r25, 0x00	; 0
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	09 f0       	breq	.+2      	; 0x2788 <ADJUST_TIME+0xef8>
    2786:	03 c1       	rjmp	.+518    	; 0x298e <ADJUST_TIME+0x10fe>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 e8       	ldi	r26, 0x80	; 128
    278e:	bf e3       	ldi	r27, 0x3F	; 63
    2790:	89 8f       	std	Y+25, r24	; 0x19
    2792:	9a 8f       	std	Y+26, r25	; 0x1a
    2794:	ab 8f       	std	Y+27, r26	; 0x1b
    2796:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	69 8d       	ldd	r22, Y+25	; 0x19
    279a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a e7       	ldi	r20, 0x7A	; 122
    27a6:	55 e4       	ldi	r21, 0x45	; 69
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8d 8b       	std	Y+21, r24	; 0x15
    27b2:	9e 8b       	std	Y+22, r25	; 0x16
    27b4:	af 8b       	std	Y+23, r26	; 0x17
    27b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <ADJUST_TIME+0xf4a>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <ADJUST_TIME+0xfc8>
	else if (__tmp > 65535)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <ADJUST_TIME+0xfb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	69 8d       	ldd	r22, Y+25	; 0x19
    27f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	0f c0       	rjmp	.+30     	; 0x283a <ADJUST_TIME+0xfaa>
    281c:	80 e9       	ldi	r24, 0x90	; 144
    281e:	91 e0       	ldi	r25, 0x01	; 1
    2820:	9a 8b       	std	Y+18, r25	; 0x12
    2822:	89 8b       	std	Y+17, r24	; 0x11
    2824:	89 89       	ldd	r24, Y+17	; 0x11
    2826:	9a 89       	ldd	r25, Y+18	; 0x12
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <ADJUST_TIME+0xf98>
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8b 89       	ldd	r24, Y+19	; 0x13
    2832:	9c 89       	ldd	r25, Y+20	; 0x14
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <ADJUST_TIME+0xf8c>
    2842:	14 c0       	rjmp	.+40     	; 0x286c <ADJUST_TIME+0xfdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9c 8b       	std	Y+20, r25	; 0x14
    2856:	8b 8b       	std	Y+19, r24	; 0x13
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	98 8b       	std	Y+16, r25	; 0x10
    285e:	8f 87       	std	Y+15, r24	; 0x0f
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	98 89       	ldd	r25, Y+16	; 0x10
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <ADJUST_TIME+0xfd4>
    2868:	98 8b       	std	Y+16, r25	; 0x10
    286a:	8f 87       	std	Y+15, r24	; 0x0f
	        	_delay_ms(1);
	        	if (!(PINB & (1 << PB6))){
    286c:	e6 e3       	ldi	r30, 0x36	; 54
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	80 74       	andi	r24, 0x40	; 64
    2878:	90 70       	andi	r25, 0x00	; 0
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	09 f0       	breq	.+2      	; 0x2880 <ADJUST_TIME+0xff0>
    287e:	87 c0       	rjmp	.+270    	; 0x298e <ADJUST_TIME+0x10fe>
		            s = (s + 1) % 60;
    2880:	80 91 6a 00 	lds	r24, 0x006A
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	2c e3       	ldi	r18, 0x3C	; 60
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	b9 01       	movw	r22, r18
    2890:	0e 94 df 14 	call	0x29be	; 0x29be <__divmodhi4>
    2894:	80 93 6a 00 	sts	0x006A, r24
	        		while(!(PINB & (1 << PB6)));
    2898:	e6 e3       	ldi	r30, 0x36	; 54
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	80 74       	andi	r24, 0x40	; 64
    28a4:	90 70       	andi	r25, 0x00	; 0
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	b9 f3       	breq	.-18     	; 0x2898 <ADJUST_TIME+0x1008>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e8       	ldi	r26, 0x80	; 128
    28b0:	bf e3       	ldi	r27, 0x3F	; 63
    28b2:	8b 87       	std	Y+11, r24	; 0x0b
    28b4:	9c 87       	std	Y+12, r25	; 0x0c
    28b6:	ad 87       	std	Y+13, r26	; 0x0d
    28b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    28bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28be:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	55 e4       	ldi	r21, 0x45	; 69
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8f 83       	std	Y+7, r24	; 0x07
    28d4:	98 87       	std	Y+8, r25	; 0x08
    28d6:	a9 87       	std	Y+9, r26	; 0x09
    28d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28da:	6f 81       	ldd	r22, Y+7	; 0x07
    28dc:	78 85       	ldd	r23, Y+8	; 0x08
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <ADJUST_TIME+0x106c>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <ADJUST_TIME+0x10ea>
	else if (__tmp > 65535)
    28fc:	6f 81       	ldd	r22, Y+7	; 0x07
    28fe:	78 85       	ldd	r23, Y+8	; 0x08
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <ADJUST_TIME+0x10d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	6b 85       	ldd	r22, Y+11	; 0x0b
    2916:	7c 85       	ldd	r23, Y+12	; 0x0c
    2918:	8d 85       	ldd	r24, Y+13	; 0x0d
    291a:	9e 85       	ldd	r25, Y+14	; 0x0e
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
    293c:	0f c0       	rjmp	.+30     	; 0x295c <ADJUST_TIME+0x10cc>
    293e:	80 e9       	ldi	r24, 0x90	; 144
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	8b 83       	std	Y+3, r24	; 0x03
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <ADJUST_TIME+0x10ba>
    294e:	9c 83       	std	Y+4, r25	; 0x04
    2950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8d 81       	ldd	r24, Y+5	; 0x05
    2954:	9e 81       	ldd	r25, Y+6	; 0x06
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <ADJUST_TIME+0x10ae>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <ADJUST_TIME+0x10fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <ADJUST_TIME+0x10f6>
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
		        	_delay_ms(1);
	        	}
	        }
	    }
}
    298e:	c5 55       	subi	r28, 0x55	; 85
    2990:	df 4f       	sbci	r29, 0xFF	; 255
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	08 95       	ret

000029a6 <__udivmodqi4>:
    29a6:	99 1b       	sub	r25, r25
    29a8:	79 e0       	ldi	r23, 0x09	; 9
    29aa:	04 c0       	rjmp	.+8      	; 0x29b4 <__udivmodqi4_ep>

000029ac <__udivmodqi4_loop>:
    29ac:	99 1f       	adc	r25, r25
    29ae:	96 17       	cp	r25, r22
    29b0:	08 f0       	brcs	.+2      	; 0x29b4 <__udivmodqi4_ep>
    29b2:	96 1b       	sub	r25, r22

000029b4 <__udivmodqi4_ep>:
    29b4:	88 1f       	adc	r24, r24
    29b6:	7a 95       	dec	r23
    29b8:	c9 f7       	brne	.-14     	; 0x29ac <__udivmodqi4_loop>
    29ba:	80 95       	com	r24
    29bc:	08 95       	ret

000029be <__divmodhi4>:
    29be:	97 fb       	bst	r25, 7
    29c0:	09 2e       	mov	r0, r25
    29c2:	07 26       	eor	r0, r23
    29c4:	0a d0       	rcall	.+20     	; 0x29da <__divmodhi4_neg1>
    29c6:	77 fd       	sbrc	r23, 7
    29c8:	04 d0       	rcall	.+8      	; 0x29d2 <__divmodhi4_neg2>
    29ca:	0c d0       	rcall	.+24     	; 0x29e4 <__udivmodhi4>
    29cc:	06 d0       	rcall	.+12     	; 0x29da <__divmodhi4_neg1>
    29ce:	00 20       	and	r0, r0
    29d0:	1a f4       	brpl	.+6      	; 0x29d8 <__divmodhi4_exit>

000029d2 <__divmodhi4_neg2>:
    29d2:	70 95       	com	r23
    29d4:	61 95       	neg	r22
    29d6:	7f 4f       	sbci	r23, 0xFF	; 255

000029d8 <__divmodhi4_exit>:
    29d8:	08 95       	ret

000029da <__divmodhi4_neg1>:
    29da:	f6 f7       	brtc	.-4      	; 0x29d8 <__divmodhi4_exit>
    29dc:	90 95       	com	r25
    29de:	81 95       	neg	r24
    29e0:	9f 4f       	sbci	r25, 0xFF	; 255
    29e2:	08 95       	ret

000029e4 <__udivmodhi4>:
    29e4:	aa 1b       	sub	r26, r26
    29e6:	bb 1b       	sub	r27, r27
    29e8:	51 e1       	ldi	r21, 0x11	; 17
    29ea:	07 c0       	rjmp	.+14     	; 0x29fa <__udivmodhi4_ep>

000029ec <__udivmodhi4_loop>:
    29ec:	aa 1f       	adc	r26, r26
    29ee:	bb 1f       	adc	r27, r27
    29f0:	a6 17       	cp	r26, r22
    29f2:	b7 07       	cpc	r27, r23
    29f4:	10 f0       	brcs	.+4      	; 0x29fa <__udivmodhi4_ep>
    29f6:	a6 1b       	sub	r26, r22
    29f8:	b7 0b       	sbc	r27, r23

000029fa <__udivmodhi4_ep>:
    29fa:	88 1f       	adc	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	5a 95       	dec	r21
    2a00:	a9 f7       	brne	.-22     	; 0x29ec <__udivmodhi4_loop>
    2a02:	80 95       	com	r24
    2a04:	90 95       	com	r25
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	08 95       	ret

00002a0c <__prologue_saves__>:
    2a0c:	2f 92       	push	r2
    2a0e:	3f 92       	push	r3
    2a10:	4f 92       	push	r4
    2a12:	5f 92       	push	r5
    2a14:	6f 92       	push	r6
    2a16:	7f 92       	push	r7
    2a18:	8f 92       	push	r8
    2a1a:	9f 92       	push	r9
    2a1c:	af 92       	push	r10
    2a1e:	bf 92       	push	r11
    2a20:	cf 92       	push	r12
    2a22:	df 92       	push	r13
    2a24:	ef 92       	push	r14
    2a26:	ff 92       	push	r15
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	ca 1b       	sub	r28, r26
    2a36:	db 0b       	sbc	r29, r27
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	09 94       	ijmp

00002a44 <__epilogue_restores__>:
    2a44:	2a 88       	ldd	r2, Y+18	; 0x12
    2a46:	39 88       	ldd	r3, Y+17	; 0x11
    2a48:	48 88       	ldd	r4, Y+16	; 0x10
    2a4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a50:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a52:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a54:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a56:	b9 84       	ldd	r11, Y+9	; 0x09
    2a58:	c8 84       	ldd	r12, Y+8	; 0x08
    2a5a:	df 80       	ldd	r13, Y+7	; 0x07
    2a5c:	ee 80       	ldd	r14, Y+6	; 0x06
    2a5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2a60:	0c 81       	ldd	r16, Y+4	; 0x04
    2a62:	1b 81       	ldd	r17, Y+3	; 0x03
    2a64:	aa 81       	ldd	r26, Y+2	; 0x02
    2a66:	b9 81       	ldd	r27, Y+1	; 0x01
    2a68:	ce 0f       	add	r28, r30
    2a6a:	d1 1d       	adc	r29, r1
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	ed 01       	movw	r28, r26
    2a78:	08 95       	ret

00002a7a <_exit>:
    2a7a:	f8 94       	cli

00002a7c <__stop_program>:
    2a7c:	ff cf       	rjmp	.-2      	; 0x2a7c <__stop_program>
